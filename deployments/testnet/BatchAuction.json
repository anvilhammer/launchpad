{
  "address": "0x81CBC7C60EC46e3C604c6886E5FE58147dd64661",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "commitment",
          "type": "uint256"
        }
      ],
      "name": "AddedCommitment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "AuctionCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymentCurrency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "AuctionDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "AuctionFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pointList",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "AuctionPointListUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumCommitmentAmount",
          "type": "uint256"
        }
      ],
      "name": "AuctionPriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "AuctionTimeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "AuctionWalletUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_data",
          "type": "string"
        }
      ],
      "name": "DocumentRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_data",
          "type": "string"
        }
      ],
      "name": "DocumentUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensWithdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SMART_CONTRACT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addAdminRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addMinterRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addOperatorRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addSmartContractRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionEnded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionSuccessful",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "calls",
          "type": "bytes[]"
        },
        {
          "internalType": "bool",
          "name": "revertOnFail",
          "type": "bool"
        }
      ],
      "name": "batch",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "successes",
          "type": "bool[]"
        },
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "readAndAgreedToMarketParticipationAgreement",
          "type": "bool"
        }
      ],
      "name": "commitEth",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "readAndAgreedToMarketParticipationAgreement",
          "type": "bool"
        }
      ],
      "name": "commitTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "readAndAgreedToMarketParticipationAgreement",
          "type": "bool"
        }
      ],
      "name": "commitTokensFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "commitments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "enableList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalizeTimeExpired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllDocuments",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseInformation",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "startTime",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "endTime",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "marketFinalized",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_funder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_paymentCurrency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minimumCommitmentAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pointList",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "getBatchAuctionInitData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "getDocument",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDocumentCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getDocumentName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "hasAdminRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "hasMinterRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "hasOperatorRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "hasSmartContractRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "initAccessControls",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_funder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_paymentCurrency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minimumCommitmentAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pointList",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "initAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "initMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketInfo",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "startTime",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "endTime",
          "type": "uint64"
        },
        {
          "internalType": "uint128",
          "name": "totalTokens",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketParticipationAgreement",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketStatus",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "commitmentsTotal",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "minimumCommitmentAmount",
          "type": "uint128"
        },
        {
          "internalType": "bool",
          "name": "finalized",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "usePointList",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketTemplate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentCurrency",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permitToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pointList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeAdminRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "removeDocument",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeMinterRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeOperatorRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeSmartContractRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minimumCommitmentAmount",
          "type": "uint256"
        }
      ],
      "name": "setAuctionPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "setAuctionTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "setAuctionWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_data",
          "type": "string"
        }
      ],
      "name": "setDocument",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_name",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_data",
          "type": "string[]"
        }
      ],
      "name": "setDocuments",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_list",
          "type": "address"
        }
      ],
      "name": "setList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "tokensClaimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "claimerCommitment",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wallet",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "withdrawTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6909cda3c1c83f864d3e2651e9f43d074c16c715c7cd83eab84340490f8ffcaf",
  "receipt": {
    "to": null,
    "from": "0x97ce22bceb1Bd5F5d2ed3f996bEba149EEEbE9E4",
    "contractAddress": "0x81CBC7C60EC46e3C604c6886E5FE58147dd64661",
    "transactionIndex": 0,
    "gasUsed": "4166153",
    "logsBloom": "0x
    "blockHash": "0x1e3307b38b22feae3605521a8d21becca6184d167eb41de2265e52dc676db619",
    "transactionHash": "0x6909cda3c1c83f864d3e2651e9f43d074c16c715c7cd83eab84340490f8ffcaf",
    "logs": [],
    "blockNumber": 4804414,
    "cumulativeGasUsed": "4166153",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5049b1aaa2d13959b89e16f9c81c8e1d",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"}],\"name\":\"AddedCommitment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentCurrency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"AuctionDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AuctionFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pointList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"AuctionPointListUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumCommitmentAmount\",\"type\":\"uint256\"}],\"name\":\"AuctionPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"AuctionTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"AuctionWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"DocumentRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"DocumentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SMART_CONTRACT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAdminRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addMinterRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addOperatorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addSmartContractRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionSuccessful\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"calls\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"revertOnFail\",\"type\":\"bool\"}],\"name\":\"batch\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"successes\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"readAndAgreedToMarketParticipationAgreement\",\"type\":\"bool\"}],\"name\":\"commitEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"readAndAgreedToMarketParticipationAgreement\",\"type\":\"bool\"}],\"name\":\"commitTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"readAndAgreedToMarketParticipationAgreement\",\"type\":\"bool\"}],\"name\":\"commitTokensFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"commitments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"enableList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeTimeExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllDocuments\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseInformation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"marketFinalized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_paymentCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minimumCommitmentAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pointList\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getBatchAuctionInitData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getDocument\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDocumentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getDocumentName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hasAdminRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hasMinterRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hasOperatorRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hasSmartContractRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"initAccessControls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_paymentCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minimumCommitmentAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pointList\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"initAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketInfo\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"totalTokens\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketParticipationAgreement\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketStatus\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"commitmentsTotal\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"minimumCommitmentAmount\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"usePointList\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketTemplate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentCurrency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permitToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pointList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAdminRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"removeDocument\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeMinterRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeOperatorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeSmartContractRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumCommitmentAmount\",\"type\":\"uint256\"}],\"name\":\"setAuctionPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setAuctionTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setAuctionWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"setDocument\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_name\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_data\",\"type\":\"string[]\"}],\"name\":\"setDocuments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_list\",\"type\":\"address\"}],\"name\":\"setList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"tokensClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimerCommitment\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAdminRole(address)\":{\"details\":\"The sender must have the admin role.\",\"params\":{\"_address\":\"EOA or contract receiving the new role.\"}},\"addMinterRole(address)\":{\"details\":\"The sender must have the admin role\",\"params\":{\"_address\":\"EOA or contract receiving the new role\"}},\"addOperatorRole(address)\":{\"details\":\"The sender must have the admin role\",\"params\":{\"_address\":\"EOA or contract receiving the new role\"}},\"addSmartContractRole(address)\":{\"details\":\"The sender must have the admin role\",\"params\":{\"_address\":\"EOA or contract receiving the new role\"}},\"auctionEnded()\":{\"returns\":{\"_0\":\"bool True if current time is greater than auction end time.\"}},\"auctionSuccessful()\":{\"returns\":{\"_0\":\"True if tokens sold greater than or equals to the minimum commitment amount.\"}},\"batch(bytes[],bool)\":{\"params\":{\"calls\":\"An array of inputs for each call.\",\"revertOnFail\":\"If True then reverts after a failed call and stops doing further calls.\"},\"returns\":{\"results\":\"An array with the returned data of each function call, mapped one-to-one to `calls`.\",\"successes\":\"An array indicating the success of a call, mapped one-to-one to `calls`.\"}},\"cancelAuction()\":{\"details\":\"Admin can cancel the auction before it starts\"},\"commitEth(address,bool)\":{\"params\":{\"_beneficiary\":\"Auction participant ETH address.\"}},\"commitTokens(uint256,bool)\":{\"params\":{\"_amount\":\"Amount of tokens to commit.\"}},\"commitTokensFrom(address,uint256,bool)\":{\"details\":\"Users must approve contract prior to committing tokens to auction.\",\"params\":{\"_amount\":\"Amount of approved ERC20 tokens.\",\"_from\":\"User ERC20 address.\"}},\"finalize()\":{\"details\":\"Transfer contract funds to initialized wallet.\"},\"finalized()\":{\"returns\":{\"_0\":\"bool True if auction has been finalised.\"}},\"getAllDocuments()\":{\"returns\":{\"_0\":\"string List of all documents names present in the contract.\"}},\"getDocument(string)\":{\"params\":{\"_name\":\"Name of the document\"},\"returns\":{\"_0\":\"string The data associated with the document.\",\"_1\":\"uint256 the timestamp at which the document was last modified.\"}},\"getDocumentCount()\":{\"returns\":{\"_0\":\"uint256 Count of the document names present in the contract.\"}},\"getDocumentName(uint256)\":{\"returns\":{\"_0\":\"string Name of the document name.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasAdminRole(address)\":{\"params\":{\"_address\":\"EOA or contract being checked.\"},\"returns\":{\"_0\":\"bool True if the account has the role or false if it does not.\"}},\"hasMinterRole(address)\":{\"params\":{\"_address\":\"EOA or contract being checked\"},\"returns\":{\"_0\":\"bool True if the account has the role or false if it does not\"}},\"hasOperatorRole(address)\":{\"params\":{\"_address\":\"EOA or contract being checked\"},\"returns\":{\"_0\":\"bool True if the account has the role or false if it does not\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"hasSmartContractRole(address)\":{\"params\":{\"_address\":\"EOA or contract being checked\"},\"returns\":{\"_0\":\"bool True if the account has the role or false if it does not\"}},\"initAccessControls(address)\":{\"params\":{\"_admin\":\"Admins address.\"}},\"initAuction(address,address,uint256,uint256,uint256,address,uint256,address,address,address)\":{\"details\":\"Init function.\",\"params\":{\"_admin\":\"Address that can finalize auction.\",\"_endTime\":\"Auction end time.\",\"_funder\":\"The address that funds the token for BatchAuction.\",\"_minimumCommitmentAmount\":\"Minimum amount collected at which the auction will be successful.\",\"_paymentCurrency\":\"The currency the BatchAuction accepts for payment. Can be ETH or token address.\",\"_startTime\":\"Auction start time.\",\"_token\":\"Address of the token being sold.\",\"_totalTokens\":\"The total number of tokens to sell in auction.\",\"_wallet\":\"Address where collected funds will be forwarded to.\"}},\"marketParticipationAgreement()\":{\"details\":\"Attribution to the awesome delta.financial contracts\"},\"removeAdminRole(address)\":{\"details\":\"The sender must have the admin role.\",\"params\":{\"_address\":\"EOA or contract affected.\"}},\"removeMinterRole(address)\":{\"details\":\"The sender must have the admin role\",\"params\":{\"_address\":\"EOA or contract affected\"}},\"removeOperatorRole(address)\":{\"details\":\"The sender must have the admin role\",\"params\":{\"_address\":\"EOA or contract affected\"}},\"removeSmartContractRole(address)\":{\"details\":\"The sender must have the admin role\",\"params\":{\"_address\":\"EOA or contract affected\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setAuctionPrice(uint256)\":{\"params\":{\"_minimumCommitmentAmount\":\"Auction minimum raised target.\"}},\"setAuctionTime(uint256,uint256)\":{\"params\":{\"_endTime\":\"Auction end time.\",\"_startTime\":\"Auction start time.\"}},\"setAuctionWallet(address)\":{\"params\":{\"_wallet\":\"Auction wallet is where funds will be sent.\"}},\"tokenPrice()\":{\"returns\":{\"_0\":\"Token price.\"}},\"tokensClaimable(address)\":{\"params\":{\"_user\":\"Auction participant address.\"},\"returns\":{\"claimerCommitment\":\"Tokens left to claim.\"}}},\"stateVariables\":{\"ETH_ADDRESS\":{\"details\":\"The placeholder ETH address.\"},\"marketTemplate\":{\"details\":\"For different marketplace types, this must be incremented.\"}},\"version\":1},\"userdoc\":{\"events\":{\"AddedCommitment(address,uint256)\":{\"notice\":\"Event for adding a commitment.\"},\"AuctionCancelled()\":{\"notice\":\"Event for cancellation of the auction.\"},\"AuctionDeployed(address,address,uint256,address,address,address)\":{\"notice\":\"Event for all auction data. Emmited on deployment.\"},\"AuctionFinalized()\":{\"notice\":\"Event for finalization of the auction.\"},\"AuctionPointListUpdated(address,bool)\":{\"notice\":\"Event for updating the point list.\"},\"AuctionPriceUpdated(uint256)\":{\"notice\":\"Event for updating auction prices. Needs to be before auction starts.\"},\"AuctionTimeUpdated(uint256,uint256)\":{\"notice\":\"Event for updating auction times.  Needs to be before auction starts.\"},\"AuctionWalletUpdated(address)\":{\"notice\":\"Event for updating auction wallet. Needs to be before auction starts.\"},\"TokensWithdrawn(address,address,uint256)\":{\"notice\":\"Event for token withdrawals.\"}},\"kind\":\"user\",\"methods\":{\"MINTER_ROLE()\":{\"notice\":\"Role definitions\"},\"addAdminRole(address)\":{\"notice\":\"Grants the admin role to an address.\"},\"addMinterRole(address)\":{\"notice\":\"Grants the minter role to an address\"},\"addOperatorRole(address)\":{\"notice\":\"Grants the operator role to an address\"},\"addSmartContractRole(address)\":{\"notice\":\"Grants the smart contract role to an address\"},\"auctionEnded()\":{\"notice\":\"Checks if the auction has ended.\"},\"auctionSuccessful()\":{\"notice\":\"Checks if raised more than minimum amount.\"},\"batch(bytes[],bool)\":{\"notice\":\"Allows batched call to self (this contract).\"},\"cancelAuction()\":{\"notice\":\"Cancel Auction\"},\"claimed(address)\":{\"notice\":\"Amount of tokens to claim per address.\"},\"commitEth(address,bool)\":{\"notice\":\"Commit ETH to buy tokens on auction.\"},\"commitTokens(uint256,bool)\":{\"notice\":\"Buy Tokens by commiting approved ERC20 tokens to this contract address.\"},\"commitTokensFrom(address,uint256,bool)\":{\"notice\":\"Checks if amount not 0 and makes the transfer and adds commitment.\"},\"finalize()\":{\"notice\":\"Auction finishes successfully above the reserve\"},\"finalizeTimeExpired()\":{\"notice\":\"Returns true if 7 days have passed since the end of the auction\"},\"finalized()\":{\"notice\":\"Checks if the auction has been finalised.\"},\"getAllDocuments()\":{\"notice\":\"Used to retrieve a full list of documents attached to the smart contract.\"},\"getDocument(string)\":{\"notice\":\"Used to return the details of a document with a known name (`string`).\"},\"getDocumentCount()\":{\"notice\":\"Used to retrieve the total documents in the smart contract.\"},\"getDocumentName(uint256)\":{\"notice\":\"Used to retrieve the document name from index in the smart contract.\"},\"hasAdminRole(address)\":{\"notice\":\"Used to check whether an address has the admin role.\"},\"hasMinterRole(address)\":{\"notice\":\"Used to check whether an address has the minter role\"},\"hasOperatorRole(address)\":{\"notice\":\"Used to check whether an address has the operator role\"},\"hasSmartContractRole(address)\":{\"notice\":\"Used to check whether an address has the smart contract role\"},\"initAccessControls(address)\":{\"notice\":\"Initializes access controls.\"},\"initAuction(address,address,uint256,uint256,uint256,address,uint256,address,address,address)\":{\"notice\":\"Initializes main contract variables and transfers funds for the auction.\"},\"marketTemplate()\":{\"notice\":\"MISOMarket template id for the factory contract.\"},\"paymentCurrency()\":{\"notice\":\"The currency the BatchAuction accepts for payment. Can be ETH or token address.\"},\"permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Call wrapper that performs `ERC20.permit` on `token`. Lookup `IERC20.permit`.\"},\"pointList()\":{\"notice\":\"Address that manages auction approvals.\"},\"removeAdminRole(address)\":{\"notice\":\"Removes the admin role from an address.\"},\"removeMinterRole(address)\":{\"notice\":\"Removes the minter role from an address\"},\"removeOperatorRole(address)\":{\"notice\":\"Removes the operator role from an address\"},\"removeSmartContractRole(address)\":{\"notice\":\"Removes the smart contract role from an address\"},\"setAuctionPrice(uint256)\":{\"notice\":\"Admin can set start and min price through this function.\"},\"setAuctionTime(uint256,uint256)\":{\"notice\":\"Admin can set start and end time through this function.\"},\"setAuctionWallet(address)\":{\"notice\":\"Admin can set the auction wallet through this function.\"},\"tokenPrice()\":{\"notice\":\"Calculates the price of each token from all commitments.\"},\"tokensClaimable(address)\":{\"notice\":\"How many tokens the user is able to claim.\"},\"withdrawTokens()\":{\"notice\":\"Withdraws bought tokens, or returns commitment if the sale is unsuccessful.\"},\"withdrawTokens(address)\":{\"notice\":\"Withdraw your tokens once the Auction has ended.\"}},\"notice\":\"Attribution to delta.financialAttribution to dutchswap.com\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Auctions/BatchAuction.sol\":\"BatchAuction\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Access/MISOAccessControls.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.6.12;\\n\\nimport \\\"./MISOAdminAccess.sol\\\";\\n\\n/**\\n * @notice Access Controls\\n * @author Attr: BlockRocket.tech\\n */\\ncontract MISOAccessControls is MISOAdminAccess {\\n    /// @notice Role definitions\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant SMART_CONTRACT_ROLE = keccak256(\\\"SMART_CONTRACT_ROLE\\\");\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    /**\\n     * @notice The deployer is automatically given the admin role which will allow them to then grant roles to other addresses\\n     */\\n    constructor() public {\\n    }\\n\\n\\n    /////////////\\n    // Lookups //\\n    /////////////\\n\\n    /**\\n     * @notice Used to check whether an address has the minter role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasMinterRole(address _address) public view returns (bool) {\\n        return hasRole(MINTER_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Used to check whether an address has the smart contract role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasSmartContractRole(address _address) public view returns (bool) {\\n        return hasRole(SMART_CONTRACT_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Used to check whether an address has the operator role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasOperatorRole(address _address) public view returns (bool) {\\n        return hasRole(OPERATOR_ROLE, _address);\\n    }\\n\\n    ///////////////\\n    // Modifiers //\\n    ///////////////\\n\\n    /**\\n     * @notice Grants the minter role to an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract receiving the new role\\n     */\\n    function addMinterRole(address _address) external {\\n        grantRole(MINTER_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Removes the minter role from an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract affected\\n     */\\n    function removeMinterRole(address _address) external {\\n        revokeRole(MINTER_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Grants the smart contract role to an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract receiving the new role\\n     */\\n    function addSmartContractRole(address _address) external {\\n        grantRole(SMART_CONTRACT_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Removes the smart contract role from an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract affected\\n     */\\n    function removeSmartContractRole(address _address) external {\\n        revokeRole(SMART_CONTRACT_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Grants the operator role to an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract receiving the new role\\n     */\\n    function addOperatorRole(address _address) external {\\n        grantRole(OPERATOR_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Removes the operator role from an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract affected\\n     */\\n    function removeOperatorRole(address _address) external {\\n        revokeRole(OPERATOR_ROLE, _address);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xc634d62180ffe0d7d058e0ae1ba78cca355cd13ea26f657859413e4d447b36cf\",\"license\":\"GPL-3.0-only\"},\"contracts/Access/MISOAdminAccess.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.6.12;\\n\\nimport \\\"../OpenZeppelin/access/AccessControl.sol\\\";\\n\\n\\ncontract MISOAdminAccess is AccessControl {\\n\\n    /// @dev Whether access is initialised.\\n    bool private initAccess;\\n\\n    /// @notice The deployer is automatically given the admin role which will allow them to then grant roles to other addresses.\\n    constructor() public {\\n    }\\n\\n    /**\\n     * @notice Initializes access controls.\\n     * @param _admin Admins address.\\n     */\\n    function initAccessControls(address _admin) public {\\n        require(!initAccess, \\\"Already initialised\\\");\\n        require(_admin != address(0), \\\"Incorrect input\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n        initAccess = true;\\n    }\\n\\n    /////////////\\n    // Lookups //\\n    /////////////\\n\\n    /**\\n     * @notice Used to check whether an address has the admin role.\\n     * @param _address EOA or contract being checked.\\n     * @return bool True if the account has the role or false if it does not.\\n     */\\n    function hasAdminRole(address _address) public  view returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, _address);\\n    }\\n\\n    ///////////////\\n    // Modifiers //\\n    ///////////////\\n\\n    /**\\n     * @notice Grants the admin role to an address.\\n     * @dev The sender must have the admin role.\\n     * @param _address EOA or contract receiving the new role.\\n     */\\n    function addAdminRole(address _address) external {\\n        grantRole(DEFAULT_ADMIN_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Removes the admin role from an address.\\n     * @dev The sender must have the admin role.\\n     * @param _address EOA or contract affected.\\n     */\\n    function removeAdminRole(address _address) external {\\n        revokeRole(DEFAULT_ADMIN_ROLE, _address);\\n    }\\n}\\n\",\"keccak256\":\"0x0c5adaaca2ed7d632ce6051d6837277de4f30ca001620cdc728342f2ee98faf1\",\"license\":\"GPL-3.0-only\"},\"contracts/Auctions/BatchAuction.sol\":{\"content\":\"pragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n//----------------------------------------------------------------------------------\\n//    I n s t a n t\\n//\\n//        .:mmm.         .:mmm:.       .ii.  .:SSSSSSSSSSSSS.     .oOOOOOOOOOOOo.  \\n//      .mMM'':Mm.     .:MM'':Mm:.     .II:  :SSs..........     .oOO'''''''''''OOo.\\n//    .:Mm'   ':Mm.   .:Mm'   'MM:.    .II:  'sSSSSSSSSSSSSS:.  :OO.           .OO:\\n//  .'mMm'     ':MM:.:MMm'     ':MM:.  .II:  .:...........:SS.  'OOo:.........:oOO'\\n//  'mMm'        ':MMmm'         'mMm:  II:  'sSSSSSSSSSSSSS'     'oOOOOOOOOOOOO'  \\n//\\n//----------------------------------------------------------------------------------\\n//\\n// Chef Gonpachi's Batch Auction\\n//\\n// An auction where contributions are swaped for a batch of tokens pro-rata\\n// \\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n//\\n// The above copyright notice and this permission notice shall be included \\n// in all copies or substantial portions of the Software.\\n//\\n// Made for Sushi.com \\n// \\n// Enjoy. (c) Chef Gonpachi, Kusatoshi, SSMikazu 2021 \\n// <https://github.com/chefgonpachi/MISO/>\\n//\\n// ---------------------------------------------------------------------\\n// SPDX-License-Identifier: GPL-3.0                        \\n// ---------------------------------------------------------------------\\n\\nimport \\\"../OpenZeppelin/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../Access/MISOAccessControls.sol\\\";\\nimport \\\"../Utils/SafeTransfer.sol\\\";\\nimport \\\"../Utils/BoringBatchable.sol\\\";\\nimport \\\"../Utils/BoringMath.sol\\\";\\nimport \\\"../Utils/BoringERC20.sol\\\";\\nimport \\\"../Utils/Documents.sol\\\";\\nimport \\\"../interfaces/IPointList.sol\\\";\\nimport \\\"../interfaces/IMisoMarket.sol\\\";\\n\\n/// @notice Attribution to delta.financial\\n/// @notice Attribution to dutchswap.com\\n\\n\\ncontract BatchAuction is  IMisoMarket, MISOAccessControls, BoringBatchable, SafeTransfer, Documents, ReentrancyGuard  {\\n\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n    using BoringMath64 for uint64;\\n    using BoringERC20 for IERC20;\\n\\n    /// @notice MISOMarket template id for the factory contract.\\n    /// @dev For different marketplace types, this must be incremented.\\n    uint256 public constant override marketTemplate = 3;\\n\\n    /// @dev The placeholder ETH address.\\n    address private constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /// @notice Main market variables.\\n    struct MarketInfo {\\n        uint64 startTime;\\n        uint64 endTime; \\n        uint128 totalTokens;\\n    }\\n    MarketInfo public marketInfo;\\n\\n    /// @notice Market dynamic variables.\\n    struct MarketStatus {\\n        uint128 commitmentsTotal;\\n        uint128 minimumCommitmentAmount;\\n        bool finalized;\\n        bool usePointList;\\n    }\\n\\n    MarketStatus public marketStatus;\\n\\n    address public auctionToken;\\n    /// @notice The currency the BatchAuction accepts for payment. Can be ETH or token address.\\n    address public paymentCurrency;\\n    /// @notice Address that manages auction approvals.\\n    address public pointList;\\n    address payable public wallet; // Where the auction funds will get paid\\n\\n    mapping(address => uint256) public commitments;\\n    /// @notice Amount of tokens to claim per address.\\n    mapping(address => uint256) public claimed;\\n\\n    /// @notice Event for all auction data. Emmited on deployment.\\n    event AuctionDeployed(address funder, address token, uint256 totalTokens, address paymentCurrency, address admin, address wallet); \\n    \\n    /// @notice Event for updating auction times.  Needs to be before auction starts.\\n    event AuctionTimeUpdated(uint256 startTime, uint256 endTime); \\n    /// @notice Event for updating auction prices. Needs to be before auction starts.\\n    event AuctionPriceUpdated(uint256 minimumCommitmentAmount); \\n    /// @notice Event for updating auction wallet. Needs to be before auction starts.\\n    event AuctionWalletUpdated(address wallet); \\n    /// @notice Event for updating the point list.\\n    event AuctionPointListUpdated(address pointList, bool enabled);\\n\\n    /// @notice Event for adding a commitment.\\n    event AddedCommitment(address addr, uint256 commitment);\\n    /// @notice Event for token withdrawals.\\n    event TokensWithdrawn(address token, address to, uint256 amount);\\n    \\n    /// @notice Event for finalization of the auction.\\n    event AuctionFinalized();\\n    /// @notice Event for cancellation of the auction.\\n    event AuctionCancelled();\\n\\n    /**\\n     * @notice Initializes main contract variables and transfers funds for the auction.\\n     * @dev Init function.\\n     * @param _funder The address that funds the token for BatchAuction.\\n     * @param _token Address of the token being sold.\\n     * @param _totalTokens The total number of tokens to sell in auction.\\n     * @param _startTime Auction start time.\\n     * @param _endTime Auction end time.\\n     * @param _paymentCurrency The currency the BatchAuction accepts for payment. Can be ETH or token address.\\n     * @param _minimumCommitmentAmount Minimum amount collected at which the auction will be successful.\\n     * @param _admin Address that can finalize auction.\\n     * @param _wallet Address where collected funds will be forwarded to.\\n     */\\n    function initAuction(\\n        address _funder,\\n        address _token,\\n        uint256 _totalTokens,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        address _paymentCurrency,\\n        uint256 _minimumCommitmentAmount,\\n        address _admin,\\n        address _pointList,\\n        address payable _wallet\\n    ) public {\\n        require(_endTime < 10000000000, \\\"BatchAuction: enter an unix timestamp in seconds, not miliseconds\\\");\\n        require(_startTime >= block.timestamp, \\\"BatchAuction: start time is before current time\\\");\\n        require(_endTime > _startTime, \\\"BatchAuction: end time must be older than start time\\\");\\n        require(_totalTokens > 0,\\\"BatchAuction: total tokens must be greater than zero\\\");\\n        require(_admin != address(0), \\\"BatchAuction: admin is the zero address\\\");\\n        require(_wallet != address(0), \\\"BatchAuction: wallet is the zero address\\\");\\n        require(IERC20(_token).decimals() == 18, \\\"BatchAuction: Token does not have 18 decimals\\\");\\n        if (_paymentCurrency != ETH_ADDRESS) {\\n            require(IERC20(_paymentCurrency).decimals() > 0, \\\"BatchAuction: Payment currency is not ERC20\\\");\\n        }\\n\\n        marketStatus.minimumCommitmentAmount = BoringMath.to128(_minimumCommitmentAmount);\\n        \\n        marketInfo.startTime = BoringMath.to64(_startTime);\\n        marketInfo.endTime = BoringMath.to64(_endTime);\\n        marketInfo.totalTokens = BoringMath.to128(_totalTokens);\\n\\n        auctionToken = _token;\\n        paymentCurrency = _paymentCurrency;\\n        wallet = _wallet;\\n\\n        initAccessControls(_admin);\\n\\n        _setList(_pointList);\\n        _safeTransferFrom(auctionToken, _funder, _totalTokens);\\n\\n        emit AuctionDeployed(_funder, _token, _totalTokens, _paymentCurrency, _admin, _wallet);\\n        emit AuctionTimeUpdated(_startTime, _endTime);\\n        emit AuctionPriceUpdated(_minimumCommitmentAmount);\\n    }\\n\\n\\n    ///--------------------------------------------------------\\n    /// Commit to buying tokens!\\n    ///--------------------------------------------------------\\n\\n    receive() external payable {\\n        revertBecauseUserDidNotProvideAgreement();\\n    }\\n    \\n    /** \\n     * @dev Attribution to the awesome delta.financial contracts\\n    */  \\n    function marketParticipationAgreement() public pure returns (string memory) {\\n        return \\\"I understand that I am interacting with a smart contract. I understand that tokens commited are subject to the token issuer and local laws where applicable. I have reviewed the code of this smart contract and understand it fully. I agree to not hold developers or other people associated with the project liable for any losses or misunderstandings\\\";\\n    }\\n    /** \\n     * @dev Not using modifiers is a purposeful choice for code readability.\\n    */ \\n    function revertBecauseUserDidNotProvideAgreement() internal pure {\\n        revert(\\\"No agreement provided, please review the smart contract before interacting with it\\\");\\n    }\\n\\n    /**\\n     * @notice Commit ETH to buy tokens on auction.\\n     * @param _beneficiary Auction participant ETH address.\\n     */\\n    function commitEth(address payable _beneficiary, bool readAndAgreedToMarketParticipationAgreement) public payable {\\n        require(paymentCurrency == ETH_ADDRESS, \\\"BatchAuction: payment currency is not ETH\\\");\\n\\n        require(msg.value > 0, \\\"BatchAuction: Value must be higher than 0\\\");\\n        if(readAndAgreedToMarketParticipationAgreement == false) {\\n            revertBecauseUserDidNotProvideAgreement();\\n        }\\n        _addCommitment(_beneficiary, msg.value);\\n\\n        /// @notice Revert if commitmentsTotal exceeds the balance\\n        require(marketStatus.commitmentsTotal <= address(this).balance, \\\"BatchAuction: The committed ETH exceeds the balance\\\");\\n    }\\n\\n    /**\\n     * @notice Buy Tokens by commiting approved ERC20 tokens to this contract address.\\n     * @param _amount Amount of tokens to commit.\\n     */\\n    function commitTokens(uint256 _amount, bool readAndAgreedToMarketParticipationAgreement) public {\\n        commitTokensFrom(msg.sender, _amount, readAndAgreedToMarketParticipationAgreement);\\n    }\\n\\n    /**\\n     * @notice Checks if amount not 0 and makes the transfer and adds commitment.\\n     * @dev Users must approve contract prior to committing tokens to auction.\\n     * @param _from User ERC20 address.\\n     * @param _amount Amount of approved ERC20 tokens.\\n     */\\n    function commitTokensFrom(address _from, uint256 _amount, bool readAndAgreedToMarketParticipationAgreement) public   nonReentrant  {\\n        require(paymentCurrency != ETH_ADDRESS, \\\"BatchAuction: Payment currency is not a token\\\");\\n        if(readAndAgreedToMarketParticipationAgreement == false) {\\n            revertBecauseUserDidNotProvideAgreement();\\n        }\\n        require(_amount> 0, \\\"BatchAuction: Value must be higher than 0\\\");\\n        _safeTransferFrom(paymentCurrency, msg.sender, _amount);\\n        _addCommitment(_from, _amount);\\n\\n    }\\n\\n\\n    /// @notice Commits to an amount during an auction\\n    /**\\n     * @notice Updates commitment for this address and total commitment of the auction.\\n     * @param _addr Auction participant address.\\n     * @param _commitment The amount to commit.\\n     */\\n    function _addCommitment(address _addr, uint256 _commitment) internal {\\n        require(block.timestamp >= marketInfo.startTime && block.timestamp <= marketInfo.endTime, \\\"BatchAuction: outside auction hours\\\"); \\n\\n        uint256 newCommitment = commitments[_addr].add(_commitment);\\n        if (marketStatus.usePointList) {\\n            require(IPointList(pointList).hasPoints(_addr, newCommitment));\\n        }\\n        commitments[_addr] = newCommitment;\\n        marketStatus.commitmentsTotal = BoringMath.to128(uint256(marketStatus.commitmentsTotal).add(_commitment));\\n        emit AddedCommitment(_addr, _commitment);\\n    }\\n\\n    /**\\n     * @notice Calculates amount of auction tokens for user to receive.\\n     * @param amount Amount of tokens to commit.\\n     * @return Auction token amount.\\n     */\\n    function _getTokenAmount(uint256 amount) internal view returns (uint256) { \\n        if (marketStatus.commitmentsTotal == 0) return 0;\\n        return amount.mul(1e18).div(tokenPrice());\\n    }\\n\\n    /**\\n     * @notice Calculates the price of each token from all commitments.\\n     * @return Token price.\\n     */\\n    function tokenPrice() public view returns (uint256) {\\n        return uint256(marketStatus.commitmentsTotal)\\n            .mul(1e18).div(uint256(marketInfo.totalTokens));\\n    }\\n\\n\\n    ///--------------------------------------------------------\\n    /// Finalize Auction\\n    ///--------------------------------------------------------\\n\\n    /// @notice Auction finishes successfully above the reserve\\n    /// @dev Transfer contract funds to initialized wallet.\\n    function finalize() public    nonReentrant \\n    {\\n        require(hasAdminRole(msg.sender) \\n                || wallet == msg.sender\\n                || hasSmartContractRole(msg.sender) \\n                || finalizeTimeExpired(),  \\\"BatchAuction: Sender must be admin\\\");\\n        require(!marketStatus.finalized, \\\"BatchAuction: Auction has already finalized\\\");\\n        require(marketInfo.totalTokens > 0, \\\"Not initialized\\\");\\n        require(block.timestamp > marketInfo.endTime, \\\"BatchAuction: Auction has not finished yet\\\");\\n        if (auctionSuccessful()) {\\n            /// @dev Successful auction\\n            /// @dev Transfer contributed tokens to wallet.\\n            _safeTokenPayment(paymentCurrency, wallet, uint256(marketStatus.commitmentsTotal));\\n        } else {\\n            /// @dev Failed auction\\n            /// @dev Return auction tokens back to wallet.\\n            _safeTokenPayment(auctionToken, wallet, marketInfo.totalTokens);\\n        }\\n        marketStatus.finalized = true;\\n        emit AuctionFinalized();\\n    }\\n\\n    /**\\n     * @notice Cancel Auction\\n     * @dev Admin can cancel the auction before it starts\\n     */\\n    function cancelAuction() public   nonReentrant  \\n    {\\n        require(hasAdminRole(msg.sender));\\n        MarketStatus storage status = marketStatus;\\n        require(!status.finalized, \\\"BatchAuction: already finalized\\\");\\n        require( uint256(status.commitmentsTotal) == 0, \\\"BatchAuction: Funds already raised\\\" );\\n\\n        _safeTokenPayment(auctionToken, wallet, uint256(marketInfo.totalTokens));\\n\\n        status.finalized = true;\\n        emit AuctionCancelled();\\n    }\\n\\n    /// @notice Withdraws bought tokens, or returns commitment if the sale is unsuccessful.\\n    function withdrawTokens() public  {\\n        withdrawTokens(msg.sender);\\n    }\\n\\n    /// @notice Withdraw your tokens once the Auction has ended.\\n    function withdrawTokens(address payable beneficiary) public   nonReentrant  {\\n        if (auctionSuccessful()) {\\n            require(marketStatus.finalized, \\\"BatchAuction: not finalized\\\");\\n            /// @dev Successful auction! Transfer claimed tokens.\\n            uint256 tokensToClaim = tokensClaimable(beneficiary);\\n            require(tokensToClaim > 0, \\\"BatchAuction: No tokens to claim\\\");\\n            claimed[beneficiary] = claimed[beneficiary].add(tokensToClaim);\\n\\n            _safeTokenPayment(auctionToken, beneficiary, tokensToClaim);\\n        } else {\\n            /// @dev Auction did not meet reserve price.\\n            /// @dev Return committed funds back to user.\\n            require(block.timestamp > marketInfo.endTime, \\\"BatchAuction: Auction has not finished yet\\\");\\n            uint256 fundsCommitted = commitments[beneficiary];\\n            require(fundsCommitted > 0, \\\"BatchAuction: No funds committed\\\");\\n            commitments[beneficiary] = 0; // Stop multiple withdrawals and free some gas\\n            _safeTokenPayment(paymentCurrency, beneficiary, fundsCommitted);\\n        }\\n    }\\n\\n\\n    /**\\n     * @notice How many tokens the user is able to claim.\\n     * @param _user Auction participant address.\\n     * @return  claimerCommitment Tokens left to claim.\\n     */\\n    function tokensClaimable(address _user) public view returns (uint256 claimerCommitment) {\\n        if (commitments[_user] == 0) return 0;\\n        uint256 unclaimedTokens = IERC20(auctionToken).balanceOf(address(this));\\n        claimerCommitment = _getTokenAmount(commitments[_user]);\\n        claimerCommitment = claimerCommitment.sub(claimed[_user]);\\n\\n        if(claimerCommitment > unclaimedTokens){\\n            claimerCommitment = unclaimedTokens;\\n        }\\n    }\\n    \\n    /**\\n     * @notice Checks if raised more than minimum amount.\\n     * @return True if tokens sold greater than or equals to the minimum commitment amount.\\n     */\\n    function auctionSuccessful() public view returns (bool) {\\n        return uint256(marketStatus.commitmentsTotal) >= uint256(marketStatus.minimumCommitmentAmount) && uint256(marketStatus.commitmentsTotal) > 0;\\n    }\\n\\n    /**\\n     * @notice Checks if the auction has ended.\\n     * @return bool True if current time is greater than auction end time.\\n     */\\n    function auctionEnded() public view returns (bool) {\\n        return block.timestamp > marketInfo.endTime;\\n    }\\n\\n    /**\\n     * @notice Checks if the auction has been finalised.\\n     * @return bool True if auction has been finalised.\\n     */\\n    function finalized() public view returns (bool) {\\n        return marketStatus.finalized;\\n    }\\n\\n    /// @notice Returns true if 7 days have passed since the end of the auction\\n    function finalizeTimeExpired() public view returns (bool) {\\n        return uint256(marketInfo.endTime) + 7 days < block.timestamp;\\n    }\\n\\n\\n    //--------------------------------------------------------\\n    // Documents\\n    //--------------------------------------------------------\\n\\n    function setDocument(string calldata _name, string calldata _data) external {\\n        require(hasAdminRole(msg.sender) );\\n        _setDocument( _name, _data);\\n    }\\n\\n    function setDocuments(string[] calldata _name, string[] calldata _data) external {\\n        require(hasAdminRole(msg.sender) );\\n        uint256 numDocs = _name.length;\\n        for (uint256 i = 0; i < numDocs; i++) {\\n            _setDocument( _name[i], _data[i]);\\n        }\\n    }\\n\\n    function removeDocument(string calldata _name) external {\\n        require(hasAdminRole(msg.sender));\\n        _removeDocument(_name);\\n    }\\n\\n\\n    //--------------------------------------------------------\\n    // Point Lists\\n    //--------------------------------------------------------\\n\\n\\n    function setList(address _list) external {\\n        require(hasAdminRole(msg.sender));\\n        _setList(_list);\\n    }\\n\\n    function enableList(bool _status) external {\\n        require(hasAdminRole(msg.sender));\\n        marketStatus.usePointList = _status;\\n\\n        emit AuctionPointListUpdated(pointList, marketStatus.usePointList);\\n    }\\n\\n    function _setList(address _pointList) private {\\n        if (_pointList != address(0)) {\\n            pointList = _pointList;\\n            marketStatus.usePointList = true;\\n        }\\n        \\n        emit AuctionPointListUpdated(_pointList, marketStatus.usePointList);\\n    }\\n\\n    //--------------------------------------------------------\\n    // Setter Functions\\n    //--------------------------------------------------------\\n\\n    /**\\n     * @notice Admin can set start and end time through this function.\\n     * @param _startTime Auction start time.\\n     * @param _endTime Auction end time.\\n     */\\n    function setAuctionTime(uint256 _startTime, uint256 _endTime) external {\\n        require(hasAdminRole(msg.sender));\\n        require(_startTime < 10000000000, \\\"BatchAuction: enter an unix timestamp in seconds, not miliseconds\\\");\\n        require(_endTime < 10000000000, \\\"BatchAuction: enter an unix timestamp in seconds, not miliseconds\\\");\\n        require(_startTime >= block.timestamp, \\\"BatchAuction: start time is before current time\\\");\\n        require(_endTime > _startTime, \\\"BatchAuction: end time must be older than start price\\\");\\n\\n        require(marketStatus.commitmentsTotal == 0, \\\"BatchAuction: auction cannot have already started\\\");\\n\\n        marketInfo.startTime = BoringMath.to64(_startTime);\\n        marketInfo.endTime = BoringMath.to64(_endTime);\\n        \\n        emit AuctionTimeUpdated(_startTime,_endTime);\\n    }\\n\\n    /**\\n     * @notice Admin can set start and min price through this function.\\n     * @param _minimumCommitmentAmount Auction minimum raised target.\\n     */\\n    function setAuctionPrice(uint256 _minimumCommitmentAmount) external {\\n        require(hasAdminRole(msg.sender));\\n\\n        require(marketStatus.commitmentsTotal == 0, \\\"BatchAuction: auction cannot have already started\\\");\\n\\n        marketStatus.minimumCommitmentAmount = BoringMath.to128(_minimumCommitmentAmount);\\n\\n        emit AuctionPriceUpdated(_minimumCommitmentAmount);\\n    }\\n\\n    /**\\n     * @notice Admin can set the auction wallet through this function.\\n     * @param _wallet Auction wallet is where funds will be sent.\\n     */\\n    function setAuctionWallet(address payable _wallet) external {\\n        require(hasAdminRole(msg.sender));\\n        require(_wallet != address(0), \\\"BatchAuction: wallet is the zero address\\\");\\n\\n        wallet = _wallet;\\n\\n        emit AuctionWalletUpdated(_wallet);\\n    }\\n\\n\\n    //--------------------------------------------------------\\n    // Market Launchers\\n    //--------------------------------------------------------\\n\\n    function init(bytes calldata _data) external override payable {\\n    }\\n\\n    function initMarket(\\n        bytes calldata _data\\n    ) public override {\\n        (\\n        address _funder,\\n        address _token,\\n        uint256 _totalTokens,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        address _paymentCurrency,\\n        uint256 _minimumCommitmentAmount,\\n        address _admin,\\n        address _pointList,\\n        address payable _wallet\\n        ) = abi.decode(_data, (\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            uint256,\\n            address,\\n            uint256,\\n            address,\\n            address,\\n            address\\n        ));\\n        initAuction(_funder, _token, _totalTokens, _startTime, _endTime, _paymentCurrency, _minimumCommitmentAmount, _admin, _pointList,  _wallet);\\n    }\\n\\n     function getBatchAuctionInitData(\\n       address _funder,\\n        address _token,\\n        uint256 _totalTokens,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        address _paymentCurrency,\\n        uint256 _minimumCommitmentAmount,\\n        address _admin,\\n        address _pointList,\\n        address payable _wallet\\n    )\\n        external\\n        pure\\n        returns (bytes memory _data)\\n    {\\n        return abi.encode(\\n            _funder,\\n            _token,\\n            _totalTokens,\\n            _startTime,\\n            _endTime,\\n            _paymentCurrency,\\n            _minimumCommitmentAmount,\\n            _admin,\\n            _pointList,\\n            _wallet\\n            );\\n    }\\n\\n    function getBaseInformation() external view returns(\\n        address token, \\n        uint64 startTime,\\n        uint64 endTime,\\n        bool marketFinalized\\n    ) {\\n        return (auctionToken, marketInfo.startTime, marketInfo.endTime, marketStatus.finalized);\\n    }\\n\\n    function getTotalTokens() external view returns(uint256) {\\n        return uint256(marketInfo.totalTokens);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4b93c3ef91ceb06a72cfd12526eab0cd31478ba7f1a57667da1ce3a5a7ac74cd\",\"license\":\"GPL-3.0\"},\"contracts/OpenZeppelin/access/AccessControl.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6711f5cfe992294baa43dd8d1d39f2caa1f62761d65abeb3f2a405833da794f2\"},\"contracts/OpenZeppelin/utils/Context.sol\":{\"content\":\"\\n\\npragma solidity 0.6.12;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x408ed1e8d180f17597080e993fea24a26ec262dd56ee20dfbdcf511d261387d4\"},\"contracts/OpenZeppelin/utils/EnumerableSet.sol\":{\"content\":\"\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x7a5437ee09401a3d1ec98f126470362f9848afbf521510d6bfae61d7b42a8fb7\"},\"contracts/OpenZeppelin/utils/ReentrancyGuard.sol\":{\"content\":\"\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xc203b23d101e6b66d736afccf9ac249811dbed15bc27c2d4c2856f9a9ecba2a3\"},\"contracts/Utils/BoringBatchable.sol\":{\"content\":\"\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable no-inline-assembly\\n\\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\\n\\nimport \\\"./BoringERC20.sol\\\";\\n\\ncontract BaseBoringBatchable {\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    /// @notice Allows batched call to self (this contract).\\n    /// @param calls An array of inputs for each call.\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\n    /// @return successes An array indicating the success of a call, mapped one-to-one to `calls`.\\n    /// @return results An array with the returned data of each function call, mapped one-to-one to `calls`.\\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\n    // C3: The length of the loop is fully under user control, so can't be exploited\\n    // C7: Delegatecall is only used on the same contract, so it's safe\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results) {\\n        successes = new bool[](calls.length);\\n        results = new bytes[](calls.length);\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\\n            require(success || !revertOnFail, _getRevertMsg(result));\\n            successes[i] = success;\\n            results[i] = result;\\n        }\\n    }\\n}\\n\\ncontract BoringBatchable is BaseBoringBatchable {\\n    /// @notice Call wrapper that performs `ERC20.permit` on `token`.\\n    /// Lookup `IERC20.permit`.\\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\\n    function permitToken(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        token.permit(from, to, amount, deadline, v, r, s);\\n    }\\n}\",\"keccak256\":\"0xc91d99eacfdc506bc5ea234c3fb2de8363ed58ca4b4ad3f6833a9ab16ed82549\"},\"contracts/Utils/BoringERC20.sol\":{\"content\":\"pragma solidity 0.6.12;\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// solhint-disable avoid-low-level-calls\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\",\"keccak256\":\"0x79899f911504a249afe8c793bcd0cb9cc32b55abb72aa4770cab8c4536febe4d\"},\"contracts/Utils/BoringMath.sol\":{\"content\":\"\\npragma solidity 0.6.12;\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b > 0, \\\"BoringMath: Div zero\\\");\\n        c = a / b;\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n\\n    function to16(uint256 a) internal pure returns (uint16 c) {\\n        require(a <= uint16(-1), \\\"BoringMath: uint16 Overflow\\\");\\n        c = uint16(a);\\n    }\\n\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\nlibrary BoringMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\nlibrary BoringMath64 {\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary BoringMath32 {\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary BoringMath16 {\\n    function add(uint16 a, uint16 b) internal pure returns (uint16 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint16 a, uint16 b) internal pure returns (uint16 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\",\"keccak256\":\"0x5421027155bdde5de1c6cb4d3197b6534464fd2c89b7eec84ce6c09f6c22b2b5\"},\"contracts/Utils/Documents.sol\":{\"content\":\"pragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n\\n/**\\n * @title Standard implementation of ERC1643 Document management\\n */\\ncontract Documents {\\n\\n    struct Document {\\n        uint32 docIndex;    // Store the document name indexes\\n        uint64 lastModified; // Timestamp at which document details was last modified\\n        string data; // data of the document that exist off-chain\\n    }\\n\\n    // mapping to store the documents details in the document\\n    mapping(string => Document) internal _documents;\\n    // mapping to store the document name indexes\\n    mapping(string => uint32) internal _docIndexes;\\n    // Array use to store all the document name present in the contracts\\n    string[] _docNames;\\n\\n    // Document Events\\n    event DocumentRemoved(string indexed _name, string _data);\\n    event DocumentUpdated(string indexed _name, string _data);\\n\\n    /**\\n     * @notice Used to attach a new document to the contract, or update the data or hash of an existing attached document\\n     * @dev Can only be executed by the owner of the contract.\\n     * @param _name Name of the document. It should be unique always\\n     * @param _data Off-chain data of the document from where it is accessible to investors/advisors to read.\\n     */\\n    function _setDocument(string calldata _name, string calldata _data) internal {\\n        require(bytes(_name).length > 0, \\\"Zero name is not allowed\\\");\\n        require(bytes(_data).length > 0, \\\"Should not be a empty data\\\");\\n        // Document storage document = _documents[_name];\\n        if (_documents[_name].lastModified == uint64(0)) {\\n            _docNames.push(_name);\\n            _documents[_name].docIndex = uint32(_docNames.length);\\n        }\\n        _documents[_name] = Document(_documents[_name].docIndex, uint64(now), _data);\\n        emit DocumentUpdated(_name, _data);\\n    }\\n\\n    /**\\n     * @notice Used to remove an existing document from the contract by giving the name of the document.\\n     * @dev Can only be executed by the owner of the contract.\\n     * @param _name Name of the document. It should be unique always\\n     */\\n\\n    function _removeDocument(string calldata _name) internal {\\n        require(_documents[_name].lastModified != uint64(0), \\\"Document should exist\\\");\\n        uint32 index = _documents[_name].docIndex - 1;\\n        if (index != _docNames.length - 1) {\\n            _docNames[index] = _docNames[_docNames.length - 1];\\n            _documents[_docNames[index]].docIndex = index + 1; \\n        }\\n        _docNames.pop();\\n        emit DocumentRemoved(_name, _documents[_name].data);\\n        delete _documents[_name];\\n    }\\n\\n    /**\\n     * @notice Used to return the details of a document with a known name (`string`).\\n     * @param _name Name of the document\\n     * @return string The data associated with the document.\\n     * @return uint256 the timestamp at which the document was last modified.\\n     */\\n    function getDocument(string calldata _name) external view returns (string memory, uint256) {\\n        return (\\n            _documents[_name].data,\\n            uint256(_documents[_name].lastModified)\\n        );\\n    }\\n\\n    /**\\n     * @notice Used to retrieve a full list of documents attached to the smart contract.\\n     * @return string List of all documents names present in the contract.\\n     */\\n    function getAllDocuments() external view returns (string[] memory) {\\n        return _docNames;\\n    }\\n\\n    /**\\n     * @notice Used to retrieve the total documents in the smart contract.\\n     * @return uint256 Count of the document names present in the contract.\\n     */\\n    function getDocumentCount() external view returns (uint256) {\\n        return _docNames.length;\\n    }\\n\\n    /**\\n     * @notice Used to retrieve the document name from index in the smart contract.\\n     * @return string Name of the document name.\\n     */\\n    function getDocumentName(uint256 _index) external view returns (string memory) {\\n        require(_index < _docNames.length, \\\"Index out of bounds\\\");\\n        return _docNames[_index];\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2b8b533d3137faf9711e9cd32b91159af502b1d0a02885c909d216ddc0a7dbdc\"},\"contracts/Utils/SafeTransfer.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\ncontract SafeTransfer {\\n\\n    address private constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /// @notice Event for token withdrawals.\\n    event TokensWithdrawn(address token, address to, uint256 amount);\\n\\n    /// @dev Helper function to handle both ETH and ERC20 payments\\n    function _safeTokenPayment(\\n        address _token,\\n        address payable _to,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == ETH_ADDRESS) {\\n            _safeTransferETH(_to,_amount );\\n        } else {\\n            _safeTransfer(_token, _to, _amount);\\n        }\\n\\n        emit TokensWithdrawn(_token, _to, _amount);\\n    }\\n\\n\\n    /// @dev Helper function to handle both ETH and ERC20 payments\\n    function _tokenPayment(\\n        address _token,\\n        address payable _to,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == ETH_ADDRESS) {\\n            _to.transfer(_amount);\\n        } else {\\n            _safeTransfer(_token, _to, _amount);\\n        }\\n\\n        emit TokensWithdrawn(_token, _to, _amount);\\n    }\\n\\n\\n    /// @dev Transfer helper from UniswapV2 Router\\n    function _safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n\\n    /**\\n     * There are many non-compliant ERC20 tokens... this can handle most, adapted from UniSwap V2\\n     * Im trying to make it a habit to put external calls last (reentrancy)\\n     * You can put this in an internal function if you like.\\n     */\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        // solium-disable-next-line security/no-low-level-calls\\n        (bool success, bytes memory data) =\\n            token.call(\\n                // 0xa9059cbb = bytes4(keccak256(\\\"transfer(address,uint256)\\\"))\\n                abi.encodeWithSelector(0xa9059cbb, to, amount)\\n            );\\n        require(success && (data.length == 0 || abi.decode(data, (bool)))); // ERC20 Transfer failed\\n    }\\n\\n    function _safeTransferFrom(\\n        address token,\\n        address from,\\n        uint256 amount\\n    ) internal virtual {\\n        // solium-disable-next-line security/no-low-level-calls\\n        (bool success, bytes memory data) =\\n            token.call(\\n                // 0x23b872dd = bytes4(keccak256(\\\"transferFrom(address,address,uint256)\\\"))\\n                abi.encodeWithSelector(0x23b872dd, from, address(this), amount)\\n            );\\n        require(success && (data.length == 0 || abi.decode(data, (bool)))); // ERC20 TransferFrom failed\\n    }\\n\\n    function _safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function _safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x1148a8ea03a0d43d3d53b85d5e00a9469aeedc4478abd81491d151c68eb29b13\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\ninterface IERC20 {\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n}\\n\",\"keccak256\":\"0xb0b858e96917459abc0eef339b52372cd473cac0ef4396be847c3a80094e01a5\"},\"contracts/interfaces/IMisoMarket.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\ninterface IMisoMarket {\\n\\n    function init(bytes calldata data) external payable;\\n    function initMarket( bytes calldata data ) external;\\n    function marketTemplate() external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0xc7d501736f2240f308f071782c01d68ece2a2a0a156c392400f4173448f3777a\"},\"contracts/interfaces/IPointList.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\n// ----------------------------------------------------------------------------\\n// White List interface\\n// ----------------------------------------------------------------------------\\n\\ninterface IPointList {\\n    function isInList(address account) external view returns (bool);\\n    function hasPoints(address account, uint256 amount) external view  returns (bool);\\n    function setPoints(\\n        address[] memory accounts,\\n        uint256[] memory amounts\\n    ) external; \\n    function initPointList(address accessControl) external ;\\n\\n}\\n\",\"keccak256\":\"0xfd0d12ce668aa90d4a3206f8d41a75b44144c9aff7ad2eabfbd4837eefaa8c26\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106103e85760003560e01c80638a845fc011610208578063c92bce8711610118578063dde51f6d116100ab578063f04899d31161007a578063f04899d314610b43578063f08b82e614610b58578063f5b541a614610b6d578063f910691314610b82578063fc4e3e0a14610ba2576103f7565b8063dde51f6d14610abe578063e0e081d714610ade578063e6594abd14610b03578063e8fcf72314610b23576103f7565b8063d547741f116100e7578063d547741f14610a3e578063d69d3e6214610a5e578063dc97e08214610a7e578063dccfe31014610a9e576103f7565b8063c92bce87146109c8578063ca15c873146109e8578063d2423b5114610a08578063d539139314610a29576103f7565b80639c64d0ae1161019b578063b3f05b971161016a578063b3f05b9714610933578063b7928b1d14610948578063c395fcb314610968578063c6b547e614610988578063c884ef83146109a8576103f7565b80639c64d0ae146108bc5780639fa5f50b146108dc578063a217fddf146108fe578063adbf377614610913576103f7565b806391d14854116101d757806391d14854146108475780639478941c1461086757806399fdb320146108875780639a87222c1461089c576103f7565b80638a845fc0146107dd5780638d8f2adb146107fd5780638fa8b790146108125780639010d07c14610827576103f7565b806349df728c116103035780636ae260c1116102965780637ccb6a64116102655780637ccb6a64146107505780637ff9b5961461077e57806381353c8e14610793578063857d2608146107b357806386433374146107c8576103f7565b80636ae260c1146106ce57806374cf9fc5146106ee5780637525b0bd146107105780637c516e9414610730576103f7565b80634ddf47d4116102d25780634ddf47d414610666578063521eb2731461067957806354f1e1261461068e5780636595171c146106ae576103f7565b806349df728c146105f15780634b3e6abb146106115780634bb278f3146106315780634dc80e1514610646576103f7565b80632f2ff15d1161037b5780633b33fe731161034a5780633b33fe731461057a5780633d15cc6d1461059a5780633d1c2273146105bc5780633f16431a146105d1576103f7565b80632f2ff15d14610500578063314148e21461052057806336568abe1461054557806336d0054b14610565576103f7565b80631b3e460e116103b75780631b3e460e1461048b578063212f8a81146104ad578063248a9ca3146104cd57806329762960146104ed576103f7565b8063031bee00146103fc578063099db01714610429578063113b0ab2146104565780631702645514610476576103f7565b366103f7576103f5610bc2565b005b600080fd5b34801561040857600080fd5b50610411610be3565b60405161042093929190614731565b60405180910390f35b34801561043557600080fd5b506104496104443660046132f1565b610c10565b6040516104209190613ac1565b34801561046257600080fd5b506104496104713660046132f1565b610c32565b34801561048257600080fd5b50610449610c4c565b34801561049757600080fd5b506104a0610c6a565b6040516104209190613acc565b3480156104b957600080fd5b506103f56104c83660046133f7565b610c6f565b3480156104d957600080fd5b506104a06104e8366004613521565b610d2e565b6103f56104fb3660046133bf565b610d43565b34801561050c57600080fd5b506103f561051b366004613539565b610de9565b34801561052c57600080fd5b50610535610e2d565b6040516104209493929190613995565b34801561055157600080fd5b506103f5610560366004613539565b610e5e565b34801561057157600080fd5b50610449610ea0565b34801561058657600080fd5b506103f5610595366004613521565b610ed6565b3480156105a657600080fd5b506105af610f72565b6040516104209190613855565b3480156105c857600080fd5b506104a0610f81565b3480156105dd57600080fd5b506103f56105ec3660046132f1565b610f87565b3480156105fd57600080fd5b506103f561060c3660046132f1565b610fa2565b34801561061d57600080fd5b506103f561062c3660046134e9565b611115565b34801561063d57600080fd5b506103f5611183565b34801561065257600080fd5b506104a06106613660046132f1565b61132d565b6103f561067436600461357e565b610de5565b34801561068557600080fd5b506105af611433565b34801561069a57600080fd5b506103f56106a93660046132f1565b611442565b3480156106ba57600080fd5b506103f56106c93660046132f1565b61145a565b3480156106da57600080fd5b506103f56106e936600461355d565b611465565b3480156106fa57600080fd5b506107036115c4565b6040516104209190613ad5565b34801561071c57600080fd5b506103f561072b366004613314565b6115e7565b34801561073c57600080fd5b506103f561074b3660046135bd565b6119ce565b34801561075c57600080fd5b5061077061076b36600461357e565b611a42565b604051610420929190613b17565b34801561078a57600080fd5b506104a0611b2f565b34801561079f57600080fd5b506103f56107ae36600461357e565b611b68565b3480156107bf57600080fd5b506104a0611ba5565b3480156107d457600080fd5b50610449611bb7565b3480156107e957600080fd5b506103f56107f83660046132f1565b611bcf565b34801561080957600080fd5b506103f5611be7565b34801561081e57600080fd5b506103f5611bf2565b34801561083357600080fd5b506105af61084236600461355d565b611ceb565b34801561085357600080fd5b50610449610862366004613539565b611d0c565b34801561087357600080fd5b506103f56108823660046132f1565b611d24565b34801561089357600080fd5b506105af611d3c565b3480156108a857600080fd5b506103f56108b73660046132f1565b611d4b565b3480156108c857600080fd5b506103f56108d736600461363f565b611dce565b3480156108e857600080fd5b506108f1611df2565b6040516104209190613a61565b34801561090a57600080fd5b506104a0611eca565b34801561091f57600080fd5b506103f561092e3660046132f1565b611ecf565b34801561093f57600080fd5b50610449611ee7565b34801561095457600080fd5b506103f56109633660046132f1565b611ef0565b34801561097457600080fd5b506104496109833660046132f1565b611f08565b34801561099457600080fd5b506107036109a3366004613521565b611f14565b3480156109b457600080fd5b506104a06109c33660046132f1565b611fdf565b3480156109d457600080fd5b506103f56109e3366004613481565b611ff1565b3480156109f457600080fd5b506104a0610a03366004613521565b612063565b610a1b610a16366004613438565b61207a565b6040516104209291906139c7565b348015610a3557600080fd5b506104a061220a565b348015610a4a57600080fd5b506103f5610a59366004613539565b61221c565b348015610a6a57600080fd5b506103f5610a793660046132f1565b612256565b348015610a8a57600080fd5b506103f5610a9936600461374d565b612271565b348015610aaa57600080fd5b506103f5610ab93660046132f1565b61227c565b348015610aca57600080fd5b506103f5610ad936600461357e565b612287565b348015610aea57600080fd5b50610af36122a3565b60405161042094939291906146f8565b348015610b0f57600080fd5b506103f5610b1e3660046132f1565b6122cd565b348015610b2f57600080fd5b506104a0610b3e3660046132f1565b612330565b348015610b4f57600080fd5b506105af612342565b348015610b6457600080fd5b506104a0612351565b348015610b7957600080fd5b506104a0612367565b348015610b8e57600080fd5b50610703610b9d366004613314565b612379565b348015610bae57600080fd5b50610449610bbd3660046132f1565b6123bd565b60405162461bcd60e51b8152600401610bda90613db5565b60405180910390fd5b6006546001600160401b0380821691600160401b810490911690600160801b90046001600160801b031683565b6000610c2a60008051602061484c83398151915283611d0c565b90505b919050565b6000610c2a60008051602061480c83398151915283611d0c565b60065442600160401b9091046001600160401b031662093a80011090565b600381565b60026005541415610c925760405162461bcd60e51b8152600401610bda9061458b565b6002600555600a546001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610cd65760405162461bcd60e51b8152600401610bda906145c2565b80610ce357610ce3610bc2565b60008211610d035760405162461bcd60e51b8152600401610bda90614385565b600a54610d1a906001600160a01b031633846123d7565b610d2483836124b4565b5050600160055550565b60009081526020819052604090206002015490565b600a546001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610d815760405162461bcd60e51b8152600401610bda906142f4565b60003411610da15760405162461bcd60e51b8152600401610bda90614385565b80610dae57610dae610bc2565b610db882346124b4565b600754476001600160801b039091161115610de55760405162461bcd60e51b8152600401610bda90613d62565b5050565b600082815260208190526040902060020154610e0790610862612660565b610e235760405162461bcd60e51b8152600401610bda90613c61565b610de58282612664565b6009546006546008546001600160a01b03909216926001600160401b0380831693600160401b909304169160ff1690565b610e66612660565b6001600160a01b0316816001600160a01b031614610e965760405162461bcd60e51b8152600401610bda9061467b565b610de582826126cd565b6007546000906001600160801b03600160801b82048116911610801590610ed157506007546001600160801b031615155b905090565b610edf33611f08565b610ee857600080fd5b6007546001600160801b031615610f115760405162461bcd60e51b8152600401610bda90614221565b610f1a81612736565b600780546001600160801b03928316600160801b0292169190911790556040517f1fd3f6b4312b53d1521fb9dab5af66131ff5b6141870420ded20e5ffb42f6cf290610f67908390613acc565b60405180910390a150565b600a546001600160a01b031681565b60045490565b610f9f60008051602061480c83398151915282610de9565b50565b60026005541415610fc55760405162461bcd60e51b8152600401610bda9061458b565b6002600555610fd2610ea0565b1561107b5760085460ff16610ff95760405162461bcd60e51b8152600401610bda9061419d565b60006110048261132d565b9050600081116110265760405162461bcd60e51b8152600401610bda90614646565b6001600160a01b0382166000908152600e60205260409020546110499082612763565b6001600160a01b038084166000908152600e602052604090209190915560095461107591168383612786565b5061110d565b600654600160401b90046001600160401b031642116110ac5760405162461bcd60e51b8152600401610bda906140d6565b6001600160a01b0381166000908152600d6020526040902054806110e25760405162461bcd60e51b8152600401610bda9061406a565b6001600160a01b038083166000908152600d6020526040812055600a5461110b91168383612786565b505b506001600555565b61111e33611f08565b61112757600080fd5b6008805461ff00191661010083151581029190911791829055600b546040517f2df0f5b650a168c74b406dcccc513b8e68da86ce7bcb0654ee83b2ac47be5b3f93610f67936001600160a01b039093169260ff91041690613961565b600260055414156111a65760405162461bcd60e51b8152600401610bda9061458b565b60026005556111b433611f08565b806111c95750600c546001600160a01b031633145b806111d857506111d833610c32565b806111e657506111e6610c4c565b6112025760405162461bcd60e51b8152600401610bda9061443e565b60085460ff16156112255760405162461bcd60e51b8152600401610bda90613d17565b600654600160801b90046001600160801b03166112545760405162461bcd60e51b8152600401610bda90613fc3565b600654600160401b90046001600160401b031642116112855760405162461bcd60e51b8152600401610bda906140d6565b61128d610ea0565b156112c057600a54600c546007546112bb926001600160a01b039081169216906001600160801b0316612786565b6112f0565b600954600c546006546112f0926001600160a01b03908116921690600160801b90046001600160801b0316612786565b6008805460ff191660011790556040517f32bebcfd2d04dbae321298091d96d2cb1d07279f59718cd83bd98245b8b82b5a90600090a16001600555565b6001600160a01b0381166000908152600d602052604081205461135257506000610c2d565b6009546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611383903090600401613855565b60206040518083038186803b15801561139b57600080fd5b505afa1580156113af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d39190613735565b6001600160a01b0384166000908152600d60205260409020549091506113f8906127f8565b6001600160a01b0384166000908152600e602052604090205490925061141f908390612830565b91508082111561142d578091505b50919050565b600c546001600160a01b031681565b610f9f60008051602061484c8339815191528261221c565b610f9f600082610de9565b61146e33611f08565b61147757600080fd5b6402540be400821061149b5760405162461bcd60e51b8152600401610bda90613cb0565b6402540be40081106114bf5760405162461bcd60e51b8152600401610bda90613cb0565b428210156114df5760405162461bcd60e51b8152600401610bda9061453c565b8181116114fe5760405162461bcd60e51b8152600401610bda90613ee7565b6007546001600160801b0316156115275760405162461bcd60e51b8152600401610bda90614221565b61153082612853565b6006805467ffffffffffffffff19166001600160401b039290921691909117905561155a81612853565b600680546001600160401b0392909216600160401b0267ffffffffffffffff60401b199092169190911790556040517f5725d1e4352d6944889e54837ffaefde55cdc0b55796b831365d61cd4c87fdb8906115b89084908490614723565b60405180910390a15050565b606060405180610180016040528061015b815260200161486c61015b9139905090565b6402540be400861061160b5760405162461bcd60e51b8152600401610bda90613cb0565b4287101561162b5760405162461bcd60e51b8152600401610bda9061453c565b86861161164a5760405162461bcd60e51b8152600401610bda90613e64565b6000881161166a5760405162461bcd60e51b8152600401610bda90614149565b6001600160a01b0383166116905760405162461bcd60e51b8152600401610bda90613fec565b6001600160a01b0381166116b65760405162461bcd60e51b8152600401610bda9061433d565b886001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156116ef57600080fd5b505afa158015611703573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117279190613771565b60ff166012146117495760405162461bcd60e51b8152600401610bda906141d4565b6001600160a01b03851673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14611800576000856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156117a857600080fd5b505afa1580156117bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e09190613771565b60ff16116118005760405162461bcd60e51b8152600401610bda90614272565b61180984612736565b600780546001600160801b03928316600160801b02921691909117905561182f87612853565b6006805467ffffffffffffffff19166001600160401b039290921691909117905561185986612853565b600680546001600160401b0392909216600160401b0267ffffffffffffffff60401b1990921691909117905561188e88612736565b600680546001600160801b03928316600160801b029216919091179055600980546001600160a01b03808c166001600160a01b031992831617909255600a8054888416908316179055600c8054928416929091169190911790556118f1836122cd565b6118fa8261287c565b600954611911906001600160a01b03168b8a6123d7565b7f7824ca06acdd8331a93fac9d8f97849b46c2d30748d7320b0d3a8173320b1f3a8a8a8a88878660405161194a9695949392919061388d565b60405180910390a17f5725d1e4352d6944889e54837ffaefde55cdc0b55796b831365d61cd4c87fdb88787604051611983929190614723565b60405180910390a17f1fd3f6b4312b53d1521fb9dab5af66131ff5b6141870420ded20e5ffb42f6cf2846040516119ba9190613acc565b60405180910390a150505050505050505050565b60405163d505accf60e01b81526001600160a01b0389169063d505accf90611a06908a908a908a908a908a908a908a90600401613920565b600060405180830381600087803b158015611a2057600080fd5b505af1158015611a34573d6000803e3d6000fd5b505050505050505050505050565b6060600060028484604051611a589291906137b9565b908152602001604051809103902060010160028585604051611a7b9291906137b9565b908152604080516020928190038301812054845460026101006001831615026000190190911604601f810185900485028301850190935282825264010000000090046001600160401b03169290918491830182828015611b1c5780601f10611af157610100808354040283529160200191611b1c565b820191906000526020600020905b815481529060010190602001808311611aff57829003601f168201915b50505050509150915091505b9250929050565b600654600754600091610ed1916001600160801b03600160801b909204821691611b629116670de0b6b3a76400006128f4565b9061292b565b6000808080808080808080611b7f8b8d018d613314565b9950995099509950995099509950995099509950611a348a8a8a8a8a8a8a8a8a8a6115e7565b60008051602061480c83398151915281565b600654600160401b90046001600160401b0316421190565b610f9f60008051602061480c8339815191528261221c565b611bf033610fa2565b565b60026005541415611c155760405162461bcd60e51b8152600401610bda9061458b565b6002600555611c2333611f08565b611c2c57600080fd5b60085460079060ff1615611c525760405162461bcd60e51b8152600401610bda90613e2d565b80546001600160801b031615611c7a5760405162461bcd60e51b8152600401610bda906144b7565b600954600c54600654611caa926001600160a01b03908116921690600160801b90046001600160801b0316612786565b6001818101805460ff191690911790556040517fa5fb31e47bd1eca58bf14a3312d5e6aeafdc4ee787c8ed348c15c2b092324d9390600090a1506001600555565b6000828152602081905260408120611d03908361295d565b90505b92915050565b6000828152602081905260408120611d039083612969565b610f9f60008051602061482c8339815191528261221c565b6009546001600160a01b031681565b611d5433611f08565b611d5d57600080fd5b6001600160a01b038116611d835760405162461bcd60e51b8152600401610bda9061433d565b600c80546001600160a01b0319166001600160a01b0383161790556040517f34ae2bad9265f0212d4cf341708b8250949164bb54f9d0e4f442024f83bb2f9090610f67908390613855565b611dd733611f08565b611de057600080fd5b611dec8484848461297e565b50505050565b60606004805480602002602001604051908101604052809291908181526020016000905b82821015611ec15760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015611ead5780601f10611e8257610100808354040283529160200191611ead565b820191906000526020600020905b815481529060010190602001808311611e9057829003601f168201915b505050505081526020019060010190611e16565b50505050905090565b600081565b610f9f60008051602061484c83398151915282610de9565b60085460ff1690565b610f9f60008051602061482c83398151915282610de9565b6000610c2a8183611d0c565b6004546060908210611f385760405162461bcd60e51b8152600401610bda90614411565b60048281548110611f4557fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015611fd35780601f10611fa857610100808354040283529160200191611fd3565b820191906000526020600020905b815481529060010190602001808311611fb657829003601f168201915b50505050509050919050565b600e6020526000908152604090205481565b611ffa33611f08565b61200357600080fd5b8260005b8181101561205b5761205386868381811061201e57fe5b9050602002810190612030919061475d565b86868581811061203c57fe5b905060200281019061204e919061475d565b61297e565b600101612007565b505050505050565b6000818152602081905260408120610c2a90612bd0565b606080836001600160401b038111801561209357600080fd5b506040519080825280602002602001820160405280156120bd578160200160208202803683370190505b509150836001600160401b03811180156120d657600080fd5b5060405190808252806020026020018201604052801561210a57816020015b60608152602001906001900390816120f55790505b50905060005b8481101561220157600060603088888581811061212957fe5b905060200281019061213b919061475d565b6040516121499291906137b9565b600060405180830381855af49150503d8060008114612184576040519150601f19603f3d011682016040523d82523d6000602084013e612189565b606091505b50915091508180612198575085155b6121a182612bdb565b906121bf5760405162461bcd60e51b8152600401610bda9190613ad5565b50818584815181106121cd57fe5b602002602001019015159081151581525050808484815181106121ec57fe5b60209081029190910101525050600101612110565b50935093915050565b60008051602061484c83398151915281565b60008281526020819052604090206002015461223a90610862612660565b610e965760405162461bcd60e51b8152600401610bda90613f73565b61225f33611f08565b61226857600080fd5b610f9f8161287c565b610de5338383610c6f565b610f9f60008261221c565b61229033611f08565b61229957600080fd5b610de58282612c3b565b6007546008546001600160801b0380831692600160801b9004169060ff8082169161010090041684565b60015460ff16156122f05760405162461bcd60e51b8152600401610bda90613bf2565b6001600160a01b0381166123165760405162461bcd60e51b8152600401610bda90614120565b612321600082610e23565b506001805460ff191681179055565b600d6020526000908152604090205481565b600b546001600160a01b031681565b600654600160801b90046001600160801b031690565b60008051602061482c83398151915281565b60608a8a8a8a8a8a8a8a8a8a60405160200161239e9a999897969594939291906138c7565b60405160208183030381529060405290509a9950505050505050505050565b6000610c2a60008051602061482c83398151915283611d0c565b60006060846001600160a01b03166323b872dd8530866040516024016123ff93929190613869565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161243891906137c9565b6000604051808303816000865af19150503d8060008114612475576040519150601f19603f3d011682016040523d82523d6000602084013e61247a565b606091505b50915091508180156124a45750805115806124a45750808060200190518101906124a49190613505565b6124ad57600080fd5b5050505050565b6006546001600160401b031642108015906124e15750600654600160401b90046001600160401b03164211155b6124fd5760405162461bcd60e51b8152600401610bda906144f9565b6001600160a01b0382166000908152600d60205260408120546125209083612763565b600854909150610100900460ff16156125be57600b54604051631cd53d5560e01b81526001600160a01b0390911690631cd53d5590612565908690859060040161397c565b60206040518083038186803b15801561257d57600080fd5b505afa158015612591573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b59190613505565b6125be57600080fd5b6001600160a01b0383166000908152600d602052604090208190556007546125f8906125f3906001600160801b031684612763565b612736565b600780546fffffffffffffffffffffffffffffffff19166001600160801b03929092169190911790556040517f077511a636ba1f10551cc7b89c13ff66a6ac9344e8a917527817a9690b15af7a90612653908590859061397c565b60405180910390a1505050565b3390565b600082815260208190526040902061267c9082612e6c565b15610de557612689612660565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020819052604090206126e59082612e81565b15610de5576126f2612660565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60006001600160801b0382111561275f5760405162461bcd60e51b8152600401610bda90613f3c565b5090565b81810181811015611d065760405162461bcd60e51b8152600401610bda90614033565b6001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156127ba576127b58282612e96565b6127c5565b6127c5838383612f28565b7f6337ed398c0e8467698c581374fdce4db14922df487b5a39483079f5f59b60a483838360405161265393929190613869565b6007546000906001600160801b031661281357506000610c2d565b610c2a61281e611b2f565b611b6284670de0b6b3a76400006128f4565b80820382811115611d065760405162461bcd60e51b8152600401610bda90613bc3565b60006001600160401b0382111561275f5760405162461bcd60e51b8152600401610bda906142bd565b6001600160a01b038116156128b857600b80546001600160a01b0383166001600160a01b03199091161790556008805461ff0019166101001790555b6008546040517f2df0f5b650a168c74b406dcccc513b8e68da86ce7bcb0654ee83b2ac47be5b3f91610f67918491610100900460ff1690613961565b600081158061290f5750508082028282828161290c57fe5b04145b611d065760405162461bcd60e51b8152600401610bda9061460f565b600080821161294c5760405162461bcd60e51b8152600401610bda906146ca565b81838161295557fe5b049392505050565b6000611d038383612f4e565b6000611d03836001600160a01b038416612f93565b8261299b5760405162461bcd60e51b8152600401610bda9061409f565b806129b85760405162461bcd60e51b8152600401610bda90614480565b60006001600160401b0316600285856040516129d59291906137b9565b908152604051908190036020019020546001600160401b03640100000000909104161415612a7b5760048054600181018255600091909152612a3a907f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0185856130bf565b50600454604051600290612a5190879087906137b9565b908152604051908190036020019020805463ffffffff9290921663ffffffff199092169190911790555b604051806060016040528060028686604051612a989291906137b9565b90815260408051602092819003830190205463ffffffff168352426001600160401b0316838301528051601f860183900483028101830182528581529201919085908590819084018382808284376000920191909152505050915250604051600290612b0790879087906137b9565b9081526040805191829003602090810190922083518154858501516001600160401b0316640100000000026bffffffffffffffff000000001963ffffffff90931663ffffffff1990921691909117919091161781559083015180519192612b7692600185019290910190613139565b5050604051612b899150859085906137b9565b60405180910390207fbaa206e5ea800eb88bce099f453fee53295b793b9d5d1cfc4ce4b6db06a34f538383604051612bc2929190613ae8565b60405180910390a250505050565b6000610c2a82612fab565b6060604482511015612c21575060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c790000006020820152610c2d565b60048201915081806020019051810190610c2a919061369b565b60006001600160401b031660028383604051612c589291906137b9565b908152604051908190036020019020546001600160401b03640100000000909104161415612c985760405162461bcd60e51b8152600401610bda90613eb8565b6000600160028484604051612cae9291906137b9565b9081526040519081900360200190205460045463ffffffff918216929092039250821660001990910114612d8f57600480546000198101908110612cee57fe5b9060005260206000200160048263ffffffff1681548110612d0b57fe5b906000526020600020019080546001816001161561010002031660029004612d349291906131a7565b5080600101600260048363ffffffff1681548110612d4e57fe5b90600052602060002001604051612d6591906137e5565b908152604051908190036020019020805463ffffffff9290921663ffffffff199092169190911790555b6004805480612d9a57fe5b600190038181906000526020600020016000612db6919061321c565b90558282604051612dc89291906137b9565b60405180910390207f4b5338540b4d1c0f6dd0308a25f633b7ff60472f894d711cff9dd64e35c613b260028585604051612e039291906137b9565b9081526020016040518091039020600101604051612e219190613b39565b60405180910390a260028383604051612e3b9291906137b9565b90815260405190819003602001902080546bffffffffffffffffffffffff1916815560006124ad600183018261321c565b6000611d03836001600160a01b038416612faf565b6000611d03836001600160a01b038416612ff9565b604080516000808252602082019092526001600160a01b038416908390604051612ec091906137c9565b60006040518083038185875af1925050503d8060008114612efd576040519150601f19603f3d011682016040523d82523d6000602084013e612f02565b606091505b5050905080612f235760405162461bcd60e51b8152600401610bda906143ce565b505050565b60006060846001600160a01b031663a9059cbb85856040516024016123ff92919061397c565b81546000908210612f715760405162461bcd60e51b8152600401610bda90613c1f565b826000018281548110612f8057fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b6000612fbb8383612f93565b612ff157508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611d06565b506000611d06565b600081815260018301602052604081205480156130b5578354600019808301919081019060009087908390811061302c57fe5b906000526020600020015490508087600001848154811061304957fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061307957fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050611d06565b6000915050611d06565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106131005782800160ff1982351617855561312d565b8280016001018555821561312d579182015b8281111561312d578235825591602001919060010190613112565b5061275f92915061325c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061317a57805160ff191683800117855561312d565b8280016001018555821561312d579182015b8281111561312d57825182559160200191906001019061318c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106131e0578054855561312d565b8280016001018555821561312d57600052602060002091601f016020900482015b8281111561312d578254825591600101919060010190613201565b50805460018160011615610100020316600290046000825580601f106132425750610f9f565b601f016020900490600052602060002090810190610f9f91905b5b8082111561275f576000815560010161325d565b60008083601f840112613282578182fd5b5081356001600160401b03811115613298578182fd5b6020830191508360208083028501011115611b2857600080fd5b60008083601f8401126132c3578182fd5b5081356001600160401b038111156132d9578182fd5b602083019150836020828501011115611b2857600080fd5b600060208284031215613302578081fd5b813561330d816147d9565b9392505050565b6000806000806000806000806000806101408b8d031215613333578586fd5b8a3561333e816147d9565b995060208b013561334e816147d9565b985060408b0135975060608b0135965060808b0135955060a08b0135613373816147d9565b945060c08b0135935060e08b013561338a816147d9565b92506101008b013561339b816147d9565b91506101208b01356133ac816147d9565b809150509295989b9194979a5092959850565b600080604083850312156133d1578182fd5b82356133dc816147d9565b915060208301356133ec816147ee565b809150509250929050565b60008060006060848603121561340b578283fd5b8335613416816147d9565b925060208401359150604084013561342d816147ee565b809150509250925092565b60008060006040848603121561344c578081fd5b83356001600160401b03811115613461578182fd5b61346d86828701613271565b909450925050602084013561342d816147ee565b60008060008060408587031215613496578182fd5b84356001600160401b03808211156134ac578384fd5b6134b888838901613271565b909650945060208701359150808211156134d0578384fd5b506134dd87828801613271565b95989497509550505050565b6000602082840312156134fa578081fd5b813561330d816147ee565b600060208284031215613516578081fd5b815161330d816147ee565b600060208284031215613532578081fd5b5035919050565b6000806040838503121561354b578182fd5b8235915060208301356133ec816147d9565b6000806040838503121561356f578182fd5b50508035926020909101359150565b60008060208385031215613590578182fd5b82356001600160401b038111156135a5578283fd5b6135b1858286016132b2565b90969095509350505050565b600080600080600080600080610100898b0312156135d9578182fd5b88356135e4816147d9565b975060208901356135f4816147d9565b96506040890135613604816147d9565b9550606089013594506080890135935060a0890135613622816147fc565b979a969950949793969295929450505060c08201359160e0013590565b60008060008060408587031215613654578182fd5b84356001600160401b038082111561366a578384fd5b613676888389016132b2565b9096509450602087013591508082111561368e578384fd5b506134dd878288016132b2565b6000602082840312156136ac578081fd5b81516001600160401b03808211156136c2578283fd5b818401915084601f8301126136d5578283fd5b8151818111156136e3578384fd5b604051601f8201601f191681016020018381118282101715613703578586fd5b60405281815283820160200187101561371a578485fd5b61372b8260208301602087016147ad565b9695505050505050565b600060208284031215613746578081fd5b5051919050565b6000806040838503121561375f578182fd5b8235915060208301356133ec816147ee565b600060208284031215613782578081fd5b815161330d816147fc565b600081518084526137a58160208601602086016147ad565b601f01601f19169290920160200192915050565b6000828483379101908152919050565b600082516137db8184602087016147ad565b9190910192915050565b6000808354600180821660008114613804576001811461381b5761384a565b60ff198316865260028304607f168601935061384a565b600283048786526020808720875b838110156138425781548a820152908501908201613829565b505050860193505b509195945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0396871681529486166020860152604085019390935290841660608401528316608083015290911660a082015260c00190565b6001600160a01b039a8b168152988a1660208a015260408901979097526060880195909552608087019390935290861660a086015260c0850152841660e084015283166101008301529091166101208201526101400190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6001600160a01b039290921682521515602082015260400190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039490941684526001600160401b039283166020850152911660408301521515606082015260800190565b604080825283519082018190526000906020906060840190828701845b82811015613a025781511515845292840192908401906001016139e4565b50505083810382850152808551613a198184613acc565b91508192508381028201848801865b83811015613a52578583038552613a4083835161378d565b94870194925090860190600101613a28565b50909998505050505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015613ab457603f19888603018452613aa285835161378d565b94509285019290850190600101613a86565b5092979650505050505050565b901515815260200190565b90815260200190565b600060208252611d03602083018461378d565b60006020825282602083015282846040840137818301604090810191909152601f909201601f19160101919050565b600060408252613b2a604083018561378d565b90508260208301529392505050565b60006020808301818452828554600180821660008114613b605760018114613b7e57613bb6565b60028304607f16855260ff1983166040890152606088019350613bb6565b60028304808652613b8e8a6147a1565b885b82811015613bac5781548b820160400152908401908801613b90565b8a01604001955050505b5091979650505050505050565b602080825260159082015274426f72696e674d6174683a20556e646572666c6f7760581b604082015260600190565b602080825260139082015272105b1c9958591e481a5b9a5d1a585b1a5cd959606a1b604082015260600190565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526e0818591b5a5b881d1bc819dc985b9d608a1b606082015260800190565b60208082526041908201527f426174636841756374696f6e3a20656e74657220616e20756e69782074696d6560408201527f7374616d7020696e207365636f6e64732c206e6f74206d696c697365636f6e646060820152607360f81b608082015260a00190565b6020808252602b908201527f426174636841756374696f6e3a2041756374696f6e2068617320616c7265616460408201526a1e48199a5b985b1a5e995960aa1b606082015260800190565b60208082526033908201527f426174636841756374696f6e3a2054686520636f6d6d6974746564204554482060408201527265786365656473207468652062616c616e636560681b606082015260800190565b60208082526052908201527f4e6f2061677265656d656e742070726f76696465642c20706c6561736520726560408201527f766965772074686520736d61727420636f6e7472616374206265666f726520696060820152711b9d195c9858dd1a5b99c81dda5d1a081a5d60721b608082015260a00190565b6020808252601f908201527f426174636841756374696f6e3a20616c72656164792066696e616c697a656400604082015260600190565b60208082526034908201527f426174636841756374696f6e3a20656e642074696d65206d757374206265206f6040820152736c646572207468616e2073746172742074696d6560601b606082015260800190565b602080825260159082015274111bd8dd5b595b9d081cda1bdd5b1908195e1a5cdd605a1b604082015260600190565b60208082526035908201527f426174636841756374696f6e3a20656e642074696d65206d757374206265206f6040820152746c646572207468616e20737461727420707269636560581b606082015260800190565b6020808252601c908201527f426f72696e674d6174683a2075696e74313238204f766572666c6f7700000000604082015260600190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526f2061646d696e20746f207265766f6b6560801b606082015260800190565b6020808252600f908201526e139bdd081a5b9a5d1a585b1a5e9959608a1b604082015260600190565b60208082526027908201527f426174636841756374696f6e3a2061646d696e20697320746865207a65726f206040820152666164647265737360c81b606082015260800190565b60208082526018908201527f426f72696e674d6174683a20416464204f766572666c6f770000000000000000604082015260600190565b6020808252818101527f426174636841756374696f6e3a204e6f2066756e647320636f6d6d6974746564604082015260600190565b60208082526018908201527f5a65726f206e616d65206973206e6f7420616c6c6f7765640000000000000000604082015260600190565b6020808252602a908201527f426174636841756374696f6e3a2041756374696f6e20686173206e6f742066696040820152691b9a5cda1959081e595d60b21b606082015260800190565b6020808252600f908201526e125b98dbdc9c9958dd081a5b9c1d5d608a1b604082015260600190565b60208082526034908201527f426174636841756374696f6e3a20746f74616c20746f6b656e73206d7573742060408201527362652067726561746572207468616e207a65726f60601b606082015260800190565b6020808252601b908201527f426174636841756374696f6e3a206e6f742066696e616c697a65640000000000604082015260600190565b6020808252602d908201527f426174636841756374696f6e3a20546f6b656e20646f6573206e6f742068617660408201526c6520313820646563696d616c7360981b606082015260800190565b60208082526031908201527f426174636841756374696f6e3a2061756374696f6e2063616e6e6f74206861766040820152701948185b1c9958591e481cdd185c9d1959607a1b606082015260800190565b6020808252602b908201527f426174636841756374696f6e3a205061796d656e742063757272656e6379206960408201526a073206e6f742045524332360ac1b606082015260800190565b6020808252601b908201527f426f72696e674d6174683a2075696e743634204f766572666c6f770000000000604082015260600190565b60208082526029908201527f426174636841756374696f6e3a207061796d656e742063757272656e637920696040820152680e640dcdee8408aa8960bb1b606082015260800190565b60208082526028908201527f426174636841756374696f6e3a2077616c6c657420697320746865207a65726f604082015267206164647265737360c01b606082015260800190565b60208082526029908201527f426174636841756374696f6e3a2056616c7565206d757374206265206869676860408201526806572207468616e20360bc1b606082015260800190565b60208082526023908201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960408201526213115160ea1b606082015260800190565b602080825260139082015272496e646578206f7574206f6620626f756e647360681b604082015260600190565b60208082526022908201527f426174636841756374696f6e3a2053656e646572206d7573742062652061646d60408201526134b760f11b606082015260800190565b6020808252601a908201527f53686f756c64206e6f74206265206120656d7074792064617461000000000000604082015260600190565b60208082526022908201527f426174636841756374696f6e3a2046756e647320616c72656164792072616973604082015261195960f21b606082015260800190565b60208082526023908201527f426174636841756374696f6e3a206f7574736964652061756374696f6e20686f60408201526275727360e81b606082015260800190565b6020808252602f908201527f426174636841756374696f6e3a2073746172742074696d65206973206265666f60408201526e72652063757272656e742074696d6560881b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252602d908201527f426174636841756374696f6e3a205061796d656e742063757272656e6379206960408201526c39903737ba1030903a37b5b2b760991b606082015260800190565b60208082526018908201527f426f72696e674d6174683a204d756c204f766572666c6f770000000000000000604082015260600190565b6020808252818101527f426174636841756374696f6e3a204e6f20746f6b656e7320746f20636c61696d604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b602080825260149082015273426f72696e674d6174683a20446976207a65726f60601b604082015260600190565b6001600160801b03948516815292909316602083015215156040820152901515606082015260800190565b918252602082015260400190565b6001600160401b0393841681529190921660208201526001600160801b03909116604082015260600190565b6000808335601e19843603018112614773578283fd5b8301803591506001600160401b0382111561478c578283fd5b602001915036819003821315611b2857600080fd5b60009081526020902090565b60005b838110156147c85781810151838201526020016147b0565b83811115611dec5750506000910152565b6001600160a01b0381168114610f9f57600080fd5b8015158114610f9f57600080fd5b60ff81168114610f9f57600080fdfe9d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873bfd97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a64920756e6465727374616e642074686174204920616d20696e746572616374696e672077697468206120736d61727420636f6e74726163742e204920756e6465727374616e64207468617420746f6b656e7320636f6d6d6974656420617265207375626a65637420746f2074686520746f6b656e2069737375657220616e64206c6f63616c206c617773207768657265206170706c696361626c652e204920686176652072657669657765642074686520636f6465206f66207468697320736d61727420636f6e747261637420616e6420756e6465727374616e642069742066756c6c792e204920616772656520746f206e6f7420686f6c6420646576656c6f70657273206f72206f746865722070656f706c65206173736f6369617465642077697468207468652070726f6a656374206c6961626c6520666f7220616e79206c6f73736573206f72206d6973756e6465727374616e64696e6773a2646970667358221220dca2fc7b727d944726b03fe8a89594cc05356da0af76538bce8a1a1f47ccd95c64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addAdminRole(address)": {
        "details": "The sender must have the admin role.",
        "params": {
          "_address": "EOA or contract receiving the new role."
        }
      },
      "addMinterRole(address)": {
        "details": "The sender must have the admin role",
        "params": {
          "_address": "EOA or contract receiving the new role"
        }
      },
      "addOperatorRole(address)": {
        "details": "The sender must have the admin role",
        "params": {
          "_address": "EOA or contract receiving the new role"
        }
      },
      "addSmartContractRole(address)": {
        "details": "The sender must have the admin role",
        "params": {
          "_address": "EOA or contract receiving the new role"
        }
      },
      "auctionEnded()": {
        "returns": {
          "_0": "bool True if current time is greater than auction end time."
        }
      },
      "auctionSuccessful()": {
        "returns": {
          "_0": "True if tokens sold greater than or equals to the minimum commitment amount."
        }
      },
      "batch(bytes[],bool)": {
        "params": {
          "calls": "An array of inputs for each call.",
          "revertOnFail": "If True then reverts after a failed call and stops doing further calls."
        },
        "returns": {
          "results": "An array with the returned data of each function call, mapped one-to-one to `calls`.",
          "successes": "An array indicating the success of a call, mapped one-to-one to `calls`."
        }
      },
      "cancelAuction()": {
        "details": "Admin can cancel the auction before it starts"
      },
      "commitEth(address,bool)": {
        "params": {
          "_beneficiary": "Auction participant ETH address."
        }
      },
      "commitTokens(uint256,bool)": {
        "params": {
          "_amount": "Amount of tokens to commit."
        }
      },
      "commitTokensFrom(address,uint256,bool)": {
        "details": "Users must approve contract prior to committing tokens to auction.",
        "params": {
          "_amount": "Amount of approved ERC20 tokens.",
          "_from": "User ERC20 address."
        }
      },
      "finalize()": {
        "details": "Transfer contract funds to initialized wallet."
      },
      "finalized()": {
        "returns": {
          "_0": "bool True if auction has been finalised."
        }
      },
      "getAllDocuments()": {
        "returns": {
          "_0": "string List of all documents names present in the contract."
        }
      },
      "getDocument(string)": {
        "params": {
          "_name": "Name of the document"
        },
        "returns": {
          "_0": "string The data associated with the document.",
          "_1": "uint256 the timestamp at which the document was last modified."
        }
      },
      "getDocumentCount()": {
        "returns": {
          "_0": "uint256 Count of the document names present in the contract."
        }
      },
      "getDocumentName(uint256)": {
        "returns": {
          "_0": "string Name of the document name."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasAdminRole(address)": {
        "params": {
          "_address": "EOA or contract being checked."
        },
        "returns": {
          "_0": "bool True if the account has the role or false if it does not."
        }
      },
      "hasMinterRole(address)": {
        "params": {
          "_address": "EOA or contract being checked"
        },
        "returns": {
          "_0": "bool True if the account has the role or false if it does not"
        }
      },
      "hasOperatorRole(address)": {
        "params": {
          "_address": "EOA or contract being checked"
        },
        "returns": {
          "_0": "bool True if the account has the role or false if it does not"
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "hasSmartContractRole(address)": {
        "params": {
          "_address": "EOA or contract being checked"
        },
        "returns": {
          "_0": "bool True if the account has the role or false if it does not"
        }
      },
      "initAccessControls(address)": {
        "params": {
          "_admin": "Admins address."
        }
      },
      "initAuction(address,address,uint256,uint256,uint256,address,uint256,address,address,address)": {
        "details": "Init function.",
        "params": {
          "_admin": "Address that can finalize auction.",
          "_endTime": "Auction end time.",
          "_funder": "The address that funds the token for BatchAuction.",
          "_minimumCommitmentAmount": "Minimum amount collected at which the auction will be successful.",
          "_paymentCurrency": "The currency the BatchAuction accepts for payment. Can be ETH or token address.",
          "_startTime": "Auction start time.",
          "_token": "Address of the token being sold.",
          "_totalTokens": "The total number of tokens to sell in auction.",
          "_wallet": "Address where collected funds will be forwarded to."
        }
      },
      "marketParticipationAgreement()": {
        "details": "Attribution to the awesome delta.financial contracts"
      },
      "removeAdminRole(address)": {
        "details": "The sender must have the admin role.",
        "params": {
          "_address": "EOA or contract affected."
        }
      },
      "removeMinterRole(address)": {
        "details": "The sender must have the admin role",
        "params": {
          "_address": "EOA or contract affected"
        }
      },
      "removeOperatorRole(address)": {
        "details": "The sender must have the admin role",
        "params": {
          "_address": "EOA or contract affected"
        }
      },
      "removeSmartContractRole(address)": {
        "details": "The sender must have the admin role",
        "params": {
          "_address": "EOA or contract affected"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setAuctionPrice(uint256)": {
        "params": {
          "_minimumCommitmentAmount": "Auction minimum raised target."
        }
      },
      "setAuctionTime(uint256,uint256)": {
        "params": {
          "_endTime": "Auction end time.",
          "_startTime": "Auction start time."
        }
      },
      "setAuctionWallet(address)": {
        "params": {
          "_wallet": "Auction wallet is where funds will be sent."
        }
      },
      "tokenPrice()": {
        "returns": {
          "_0": "Token price."
        }
      },
      "tokensClaimable(address)": {
        "params": {
          "_user": "Auction participant address."
        },
        "returns": {
          "claimerCommitment": "Tokens left to claim."
        }
      }
    },
    "stateVariables": {
      "ETH_ADDRESS": {
        "details": "The placeholder ETH address."
      },
      "marketTemplate": {
        "details": "For different marketplace types, this must be incremented."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "AddedCommitment(address,uint256)": {
        "notice": "Event for adding a commitment."
      },
      "AuctionCancelled()": {
        "notice": "Event for cancellation of the auction."
      },
      "AuctionDeployed(address,address,uint256,address,address,address)": {
        "notice": "Event for all auction data. Emmited on deployment."
      },
      "AuctionFinalized()": {
        "notice": "Event for finalization of the auction."
      },
      "AuctionPointListUpdated(address,bool)": {
        "notice": "Event for updating the point list."
      },
      "AuctionPriceUpdated(uint256)": {
        "notice": "Event for updating auction prices. Needs to be before auction starts."
      },
      "AuctionTimeUpdated(uint256,uint256)": {
        "notice": "Event for updating auction times.  Needs to be before auction starts."
      },
      "AuctionWalletUpdated(address)": {
        "notice": "Event for updating auction wallet. Needs to be before auction starts."
      },
      "TokensWithdrawn(address,address,uint256)": {
        "notice": "Event for token withdrawals."
      }
    },
    "kind": "user",
    "methods": {
      "MINTER_ROLE()": {
        "notice": "Role definitions"
      },
      "addAdminRole(address)": {
        "notice": "Grants the admin role to an address."
      },
      "addMinterRole(address)": {
        "notice": "Grants the minter role to an address"
      },
      "addOperatorRole(address)": {
        "notice": "Grants the operator role to an address"
      },
      "addSmartContractRole(address)": {
        "notice": "Grants the smart contract role to an address"
      },
      "auctionEnded()": {
        "notice": "Checks if the auction has ended."
      },
      "auctionSuccessful()": {
        "notice": "Checks if raised more than minimum amount."
      },
      "batch(bytes[],bool)": {
        "notice": "Allows batched call to self (this contract)."
      },
      "cancelAuction()": {
        "notice": "Cancel Auction"
      },
      "claimed(address)": {
        "notice": "Amount of tokens to claim per address."
      },
      "commitEth(address,bool)": {
        "notice": "Commit ETH to buy tokens on auction."
      },
      "commitTokens(uint256,bool)": {
        "notice": "Buy Tokens by commiting approved ERC20 tokens to this contract address."
      },
      "commitTokensFrom(address,uint256,bool)": {
        "notice": "Checks if amount not 0 and makes the transfer and adds commitment."
      },
      "finalize()": {
        "notice": "Auction finishes successfully above the reserve"
      },
      "finalizeTimeExpired()": {
        "notice": "Returns true if 7 days have passed since the end of the auction"
      },
      "finalized()": {
        "notice": "Checks if the auction has been finalised."
      },
      "getAllDocuments()": {
        "notice": "Used to retrieve a full list of documents attached to the smart contract."
      },
      "getDocument(string)": {
        "notice": "Used to return the details of a document with a known name (`string`)."
      },
      "getDocumentCount()": {
        "notice": "Used to retrieve the total documents in the smart contract."
      },
      "getDocumentName(uint256)": {
        "notice": "Used to retrieve the document name from index in the smart contract."
      },
      "hasAdminRole(address)": {
        "notice": "Used to check whether an address has the admin role."
      },
      "hasMinterRole(address)": {
        "notice": "Used to check whether an address has the minter role"
      },
      "hasOperatorRole(address)": {
        "notice": "Used to check whether an address has the operator role"
      },
      "hasSmartContractRole(address)": {
        "notice": "Used to check whether an address has the smart contract role"
      },
      "initAccessControls(address)": {
        "notice": "Initializes access controls."
      },
      "initAuction(address,address,uint256,uint256,uint256,address,uint256,address,address,address)": {
        "notice": "Initializes main contract variables and transfers funds for the auction."
      },
      "marketTemplate()": {
        "notice": "MISOMarket template id for the factory contract."
      },
      "paymentCurrency()": {
        "notice": "The currency the BatchAuction accepts for payment. Can be ETH or token address."
      },
      "permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Call wrapper that performs `ERC20.permit` on `token`. Lookup `IERC20.permit`."
      },
      "pointList()": {
        "notice": "Address that manages auction approvals."
      },
      "removeAdminRole(address)": {
        "notice": "Removes the admin role from an address."
      },
      "removeMinterRole(address)": {
        "notice": "Removes the minter role from an address"
      },
      "removeOperatorRole(address)": {
        "notice": "Removes the operator role from an address"
      },
      "removeSmartContractRole(address)": {
        "notice": "Removes the smart contract role from an address"
      },
      "setAuctionPrice(uint256)": {
        "notice": "Admin can set start and min price through this function."
      },
      "setAuctionTime(uint256,uint256)": {
        "notice": "Admin can set start and end time through this function."
      },
      "setAuctionWallet(address)": {
        "notice": "Admin can set the auction wallet through this function."
      },
      "tokenPrice()": {
        "notice": "Calculates the price of each token from all commitments."
      },
      "tokensClaimable(address)": {
        "notice": "How many tokens the user is able to claim."
      },
      "withdrawTokens()": {
        "notice": "Withdraws bought tokens, or returns commitment if the sale is unsuccessful."
      },
      "withdrawTokens(address)": {
        "notice": "Withdraw your tokens once the Auction has ended."
      }
    },
    "notice": "Attribution to delta.financialAttribution to dutchswap.com",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15466,
        "contract": "contracts/Auctions/BatchAuction.sol:BatchAuction",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)15462_storage)"
      },
      {
        "astId": 808,
        "contract": "contracts/Auctions/BatchAuction.sol:BatchAuction",
        "label": "initAccess",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 23576,
        "contract": "contracts/Auctions/BatchAuction.sol:BatchAuction",
        "label": "_documents",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Document)23572_storage)"
      },
      {
        "astId": 23580,
        "contract": "contracts/Auctions/BatchAuction.sol:BatchAuction",
        "label": "_docIndexes",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_string_memory_ptr,t_uint32)"
      },
      {
        "astId": 23583,
        "contract": "contracts/Auctions/BatchAuction.sol:BatchAuction",
        "label": "_docNames",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 17475,
        "contract": "contracts/Auctions/BatchAuction.sol:BatchAuction",
        "label": "_status",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1320,
        "contract": "contracts/Auctions/BatchAuction.sol:BatchAuction",
        "label": "marketInfo",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(MarketInfo)1318_storage"
      },
      {
        "astId": 1331,
        "contract": "contracts/Auctions/BatchAuction.sol:BatchAuction",
        "label": "marketStatus",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(MarketStatus)1329_storage"
      },
      {
        "astId": 1333,
        "contract": "contracts/Auctions/BatchAuction.sol:BatchAuction",
        "label": "auctionToken",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 1336,
        "contract": "contracts/Auctions/BatchAuction.sol:BatchAuction",
        "label": "paymentCurrency",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 1339,
        "contract": "contracts/Auctions/BatchAuction.sol:BatchAuction",
        "label": "pointList",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 1341,
        "contract": "contracts/Auctions/BatchAuction.sol:BatchAuction",
        "label": "wallet",
        "offset": 0,
        "slot": "12",
        "type": "t_address_payable"
      },
      {
        "astId": 1345,
        "contract": "contracts/Auctions/BatchAuction.sol:BatchAuction",
        "label": "commitments",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1350,
        "contract": "contracts/Auctions/BatchAuction.sol:BatchAuction",
        "label": "claimed",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)15462_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)15462_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Document)23572_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct Documents.Document)",
        "numberOfBytes": "32",
        "value": "t_struct(Document)23572_storage"
      },
      "t_mapping(t_string_memory_ptr,t_uint32)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)17156_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 17155,
            "contract": "contracts/Auctions/BatchAuction.sol:BatchAuction",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)16891_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Document)23572_storage": {
        "encoding": "inplace",
        "label": "struct Documents.Document",
        "members": [
          {
            "astId": 23567,
            "contract": "contracts/Auctions/BatchAuction.sol:BatchAuction",
            "label": "docIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 23569,
            "contract": "contracts/Auctions/BatchAuction.sol:BatchAuction",
            "label": "lastModified",
            "offset": 4,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 23571,
            "contract": "contracts/Auctions/BatchAuction.sol:BatchAuction",
            "label": "data",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MarketInfo)1318_storage": {
        "encoding": "inplace",
        "label": "struct BatchAuction.MarketInfo",
        "members": [
          {
            "astId": 1313,
            "contract": "contracts/Auctions/BatchAuction.sol:BatchAuction",
            "label": "startTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 1315,
            "contract": "contracts/Auctions/BatchAuction.sol:BatchAuction",
            "label": "endTime",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 1317,
            "contract": "contracts/Auctions/BatchAuction.sol:BatchAuction",
            "label": "totalTokens",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(MarketStatus)1329_storage": {
        "encoding": "inplace",
        "label": "struct BatchAuction.MarketStatus",
        "members": [
          {
            "astId": 1322,
            "contract": "contracts/Auctions/BatchAuction.sol:BatchAuction",
            "label": "commitmentsTotal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 1324,
            "contract": "contracts/Auctions/BatchAuction.sol:BatchAuction",
            "label": "minimumCommitmentAmount",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 1326,
            "contract": "contracts/Auctions/BatchAuction.sol:BatchAuction",
            "label": "finalized",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 1328,
            "contract": "contracts/Auctions/BatchAuction.sol:BatchAuction",
            "label": "usePointList",
            "offset": 1,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)15462_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 15459,
            "contract": "contracts/Auctions/BatchAuction.sol:BatchAuction",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)17156_storage"
          },
          {
            "astId": 15461,
            "contract": "contracts/Auctions/BatchAuction.sol:BatchAuction",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)16891_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 16886,
            "contract": "contracts/Auctions/BatchAuction.sol:BatchAuction",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 16890,
            "contract": "contracts/Auctions/BatchAuction.sol:BatchAuction",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}